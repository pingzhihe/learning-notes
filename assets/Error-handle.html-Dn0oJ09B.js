import{_ as s,c as a,a as p,o as e}from"./app-DsOgR8nk.js";const t={};function l(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h1><h2 id="rust-错误处理概述" tabindex="-1"><a class="header-anchor" href="#rust-错误处理概述"><span>Rust 错误处理概述</span></a></h2><ul><li>Rust 的可靠性: 错误处理 <ul><li>大部分情况下: 在编译时提示错误, 并处理</li></ul></li><li>错误的分类: <ul><li>可恢复错误: 例如: 打开文件失败, 可恢复的错误</li><li>不可恢复错误(bug): 例如: 索引越界</li></ul></li><li>Rust 没有类似异常的机制 <ul><li>可恢复错误: <code>Result&lt;T, E&gt;</code></li><li>不可恢复错误: <code>panic!</code></li></ul></li></ul><h2 id="不可恢复的错误与-panic" tabindex="-1"><a class="header-anchor" href="#不可恢复的错误与-panic"><span>不可恢复的错误与 panic！</span></a></h2><ul><li>当<code>panic!</code> 宏执行: <ul><li>你的程序会打印出一个错误信息,</li><li>展开(unwind), 清理调用栈(Stack)</li><li>退出程序</li></ul></li></ul><h2 id="为应对-panic-展开或中止-abort-调用栈" tabindex="-1"><a class="header-anchor" href="#为应对-panic-展开或中止-abort-调用栈"><span>为应对 panic, 展开或中止(abort)调用栈</span></a></h2><ul><li><p>默认情况下, 当panic 发生:</p><ul><li>程序展开调用栈(工作量大) <ul><li>Rust 沿着栈往回走</li><li>依次清理每个函数的数据</li></ul></li><li>或立即中止调用栈: <ul><li>不清理数据, 直接退出程序</li><li>内存由OS 处理</li></ul></li></ul></li><li><p>想让二进制文件更小, 把设置从展开改为中止</p><ul><li>Cargo.toml: <ul><li><code>[profile.release]</code></li><li><code>panic = &#39;abort&#39;</code></li></ul></li></ul></li></ul><h2 id="panic-的回溯-backtrace" tabindex="-1"><a class="header-anchor" href="#panic-的回溯-backtrace"><span>panic! 的回溯(backtrace)</span></a></h2><ul><li><p>panic! 可能出现在:</p><ul><li>我们写的代码中</li><li>我们所依赖的代码中</li></ul></li><li><p>可调用panic! 的函数回溯信息来定位引起问题的代码</p></li><li><p>通过设置环境变量: <code>RUST_BACKTRACE</code>可以打印出回溯信息</p><ul><li>linux: <code>export RUST_BACKTRACE=1 &amp;&amp; cargo run</code></li><li>windows: <code>set RUST_BACKTRACE=1 &amp;&amp; cargo run</code></li><li>mac: <code>RUST_BACKTRACE=1 cargo run</code></li></ul></li><li><p>为了获取带有调试信息的回溯, 必须启用调试符号（不带 --release）编译程序</p></li></ul><h2 id="result-t-e-与处理-可恢复错误-recoverable-error" tabindex="-1"><a class="header-anchor" href="#result-t-e-与处理-可恢复错误-recoverable-error"><span><code>Result&lt;T, E&gt;</code> 与处理 可恢复错误(recoverable error)</span></a></h2><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token type-definition class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>T: 操作成功情况下, OK 变体返回的数据类型<br> E: 操作失败情况下, Err 变体返回的错误类型</p><h2 id="处理-result" tabindex="-1"><a class="header-anchor" href="#处理-result"><span>处理 Result</span></a></h2><h3 id="匹配不同的错误" tabindex="-1"><a class="header-anchor" href="#匹配不同的错误"><span>匹配不同的错误</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">ErrorKind</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token keyword">match</span> f<span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Ok</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> file<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">Err</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">match</span> error<span class="token punctuation">.</span><span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">ErrorKind</span><span class="token punctuation">::</span><span class="token class-name">NotFound</span> <span class="token operator">=&gt;</span> <span class="token keyword">match</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Ok</span><span class="token punctuation">(</span>fc<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> fc<span class="token punctuation">,</span></span>
<span class="line">                <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Problem creating the file: {:?}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            other_error <span class="token operator">=&gt;</span> <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Problem opening the file: {:?}&quot;</span><span class="token punctuation">,</span> other_error<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>上面例子中使用了很多match...</li><li>match 很有用, 但是也很冗长</li><li>闭包(closure)。<code>Result&lt;T,E&gt;</code> 有很多方法: <ul><li>他们接收闭包作为参数</li><li>使用match 实现</li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">ErrorKind</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>error<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> error<span class="token punctuation">.</span><span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">ErrorKind</span><span class="token punctuation">::</span><span class="token class-name">NotFound</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>error<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Problem creating the file: {:?}&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Problem opening the file: {:?}&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样写更简洁</p><h2 id="unwrap" tabindex="-1"><a class="header-anchor" href="#unwrap"><span>unwrap</span></a></h2><ul><li>unwrap: match 表达式的一个快捷方法: <ul><li>如果Result 的值是Ok, unwrap 会返回Ok 中的值</li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token class-name">File</span> <span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token keyword">match</span> f <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Ok</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> file<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Err</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Problem opening the file: {:?}&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token class-name">File</span> <span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>是一样的</p><h2 id="expect" tabindex="-1"><a class="header-anchor" href="#expect"><span>expect</span></a></h2><ul><li>expect: 与unwrap 类似, 但是可以指定错误信息</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token class-name">File</span> <span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to open hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="传播错误" tabindex="-1"><a class="header-anchor" href="#传播错误"><span>传播错误</span></a></h2><ul><li>在函数中传播错误</li><li>将错误返回给调用者</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Read</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">read_username_from_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> f <span class="token operator">=</span> <span class="token keyword">match</span> f <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Ok</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> file<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> s<span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">match</span> f<span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Ok</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">read_username_from_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>? 运算符</span></a></h2><ul><li>? 运算符: 传播错误的一种快捷方式</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">read_username_from_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> s<span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    f<span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> s<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Ok</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的<code>fn read_username_from_file()</code>实现了和上文一样的功能，但是更简洁 (好甜的语法糖orz)</p><ul><li>如果Result是OK: OK中的值就是表达式的结果, 然后继续执行程序</li><li>如果Result是Err: Err中的值将作为整个函数的返回值, 就好像使用了return 关键字一样</li></ul><h2 id="与from函数" tabindex="-1"><a class="header-anchor" href="#与from函数"><span>? 与from函数</span></a></h2><ul><li><p><code>Trait std::convert::From</code>:</p><ul><li>用于错误之间的类型转换</li></ul></li><li><p>被? 所引用的错误, 会隐式地被from 函数处理</p></li><li><p>当? 调用from 函数时</p><ul><li>它所接受的错误类型会被转化为当前函数返回类型所定义的错误类型</li></ul></li><li><p>用于: 针对不同错误类型, 返回同一种错误类型</p><ul><li>只要每个错误类型实现了转换为返回类型所定义的错误类型的from 函数</li></ul></li></ul><h2 id="运算符的链式调用" tabindex="-1"><a class="header-anchor" href="#运算符的链式调用"><span>?运算符的链式调用</span></a></h2><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">read_username_from_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> s<span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> s<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Ok</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这三行的效果和上文一样, 但是更简洁</p><h2 id="运算符只能用于返回result的函数" tabindex="-1"><a class="header-anchor" href="#运算符只能用于返回result的函数"><span>? 运算符只能用于返回Result的函数</span></a></h2><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">Error</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以在main 函数中使用? 运算符了</p><ul><li><code>Box&lt;dyn Error&gt;</code> 意味着函数会返回实现了Error trait 的类型, 但是不需要指定具体将会返回的值的类型 <ul><li>简单理解: 任何可能的错误类型</li></ul></li></ul><h2 id="什么时候该用-panic" tabindex="-1"><a class="header-anchor" href="#什么时候该用-panic"><span>什么时候该用 panic!</span></a></h2><ul><li>在定义一个可能失败的函数的时候, 优先考虑返回Result</li><li>否则就是panic!</li></ul><h2 id="编写实例-原型代码-测试" tabindex="-1"><a class="header-anchor" href="#编写实例-原型代码-测试"><span>编写实例, 原型代码, 测试</span></a></h2><ul><li>可以使用panic! <ul><li>演示某些概念: unwrap</li><li>原型代码: unwrap, expect (我们还不知道后续该怎么处理错误)</li><li>测试: unwrap, expect</li></ul></li></ul><h2 id="有时你比编译器掌握更多信息" tabindex="-1"><a class="header-anchor" href="#有时你比编译器掌握更多信息"><span>有时你比编译器掌握更多信息</span></a></h2><ul><li>你可以知道Result 就是OK: unwrap</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>net<span class="token punctuation">::</span></span><span class="token class-name">IpAddr</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> home<span class="token punctuation">:</span> <span class="token class-name">IpAddr</span> <span class="token operator">=</span> <span class="token string">&quot;170.0.0.1&quot;</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="错误处理的指导性建议" tabindex="-1"><a class="header-anchor" href="#错误处理的指导性建议"><span>错误处理的指导性建议</span></a></h2><ul><li>当代码最终可能处于损坏状态的时候, 最好使用panic！</li><li>损坏状态(Bad state): 某些假设, 保证, 约定或不可变性被打破 <ul><li>例如非法的值, 矛盾的值或者空缺的值被传入代码</li><li>以及下列的一条: <ul><li>这种损坏并不是预期能够偶尔发生的事情。</li><li>在此之后,你的代码中没有一个好的方法来将这些信息(处于损坏状态)进行编码。</li></ul></li></ul></li></ul><h2 id="场景建议" tabindex="-1"><a class="header-anchor" href="#场景建议"><span>场景建议</span></a></h2><ul><li>调用你的代码, 传入无意义的值: panic!</li><li>调用外部不可控代码, 返回非法状态, 你无法修复: panic!</li><li>如果失败是可预期的: Result</li><li>当你的代码对值进行操作, 首先应该验证这些值: panic!</li></ul>`,55)]))}const i=s(t,[["render",l],["__file","Error-handle.html.vue"]]),u=JSON.parse('{"path":"/rust-learning/Error-handle.html","title":"错误处理","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Rust 错误处理概述","slug":"rust-错误处理概述","link":"#rust-错误处理概述","children":[]},{"level":2,"title":"不可恢复的错误与 panic！","slug":"不可恢复的错误与-panic","link":"#不可恢复的错误与-panic","children":[]},{"level":2,"title":"为应对 panic, 展开或中止(abort)调用栈","slug":"为应对-panic-展开或中止-abort-调用栈","link":"#为应对-panic-展开或中止-abort-调用栈","children":[]},{"level":2,"title":"panic! 的回溯(backtrace)","slug":"panic-的回溯-backtrace","link":"#panic-的回溯-backtrace","children":[]},{"level":2,"title":"Result<T, E> 与处理 可恢复错误(recoverable error)","slug":"result-t-e-与处理-可恢复错误-recoverable-error","link":"#result-t-e-与处理-可恢复错误-recoverable-error","children":[]},{"level":2,"title":"处理 Result","slug":"处理-result","link":"#处理-result","children":[{"level":3,"title":"匹配不同的错误","slug":"匹配不同的错误","link":"#匹配不同的错误","children":[]}]},{"level":2,"title":"unwrap","slug":"unwrap","link":"#unwrap","children":[]},{"level":2,"title":"expect","slug":"expect","link":"#expect","children":[]},{"level":2,"title":"传播错误","slug":"传播错误","link":"#传播错误","children":[]},{"level":2,"title":"? 运算符","slug":"运算符","link":"#运算符","children":[]},{"level":2,"title":"? 与from函数","slug":"与from函数","link":"#与from函数","children":[]},{"level":2,"title":"?运算符的链式调用","slug":"运算符的链式调用","link":"#运算符的链式调用","children":[]},{"level":2,"title":"? 运算符只能用于返回Result的函数","slug":"运算符只能用于返回result的函数","link":"#运算符只能用于返回result的函数","children":[]},{"level":2,"title":"什么时候该用 panic!","slug":"什么时候该用-panic","link":"#什么时候该用-panic","children":[]},{"level":2,"title":"编写实例, 原型代码, 测试","slug":"编写实例-原型代码-测试","link":"#编写实例-原型代码-测试","children":[]},{"level":2,"title":"有时你比编译器掌握更多信息","slug":"有时你比编译器掌握更多信息","link":"#有时你比编译器掌握更多信息","children":[]},{"level":2,"title":"错误处理的指导性建议","slug":"错误处理的指导性建议","link":"#错误处理的指导性建议","children":[]},{"level":2,"title":"场景建议","slug":"场景建议","link":"#场景建议","children":[]}],"git":{"updatedTime":1731216681000,"contributors":[{"name":"pingzhihe","email":"pzh1760473545@gmail.com","commits":2,"url":"https://github.com/pingzhihe"}]},"filePathRelative":"rust-learning/Error-handle.md"}');export{i as comp,u as data};
