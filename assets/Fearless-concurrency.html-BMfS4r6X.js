import{_ as s,c as a,a as p,o as t}from"./app-DsOgR8nk.js";const e={};function l(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="无畏并发" tabindex="-1"><a class="header-anchor" href="#无畏并发"><span>无畏并发</span></a></h1><h2 id="并发" tabindex="-1"><a class="header-anchor" href="#并发"><span>并发</span></a></h2><ul><li><p>Concurrent: 程序的不同部分之间独立的执行</p></li><li><p>Parallel: 程序的不同部分之间同时执行</p></li><li><p>Rust 无畏并发: 允许你编写没有细微Bug的代码, 并在不引入新bug的情况下易于重构</p></li><li><p>注意: 本章的内容泛指concurrent和parallel</p></li></ul><h2 id="使用线程来同时运行代码" tabindex="-1"><a class="header-anchor" href="#使用线程来同时运行代码"><span>使用线程来同时运行代码</span></a></h2><h3 id="进程与线程" tabindex="-1"><a class="header-anchor" href="#进程与线程"><span>进程与线程</span></a></h3><ul><li><p>在大部分OS里, 代码运行在进程(process)中, OS 同时管理多个进程</p></li><li><p>在你的程序里, 各部分可以分别同时运行, 运行这些独立部分的就是线程(thread)</p></li><li><p>多线程运行:</p><ul><li>提升性能表现</li><li>增加复杂性, 无法保障各线程的执行顺序</li></ul></li></ul><h3 id="多线程可导致的问题" tabindex="-1"><a class="header-anchor" href="#多线程可导致的问题"><span>多线程可导致的问题</span></a></h3><ul><li>竞争状态, 线程以不一致的顺序访问数据或资源</li><li>死锁, 两个线程彼此等待对方使用完其所拥有的资源, 线程无法继续</li><li>只在某些情况下发生的bug, 很难可靠地复制现象和修复</li></ul><h3 id="实现线程的方式" tabindex="-1"><a class="header-anchor" href="#实现线程的方式"><span>实现线程的方式</span></a></h3><ul><li><p>通过调用OS的API来创建线程1:1模型</p><ul><li>需要比较小的运行时</li></ul></li><li><p>语言自己实现的线程(绿色线程)M:N模型</p><ul><li>需要更大的运行时</li></ul></li><li><p>Rust: 需要权衡运行时的支持</p></li><li><p>Rust 标准库仅提供1:1模型的线程</p></li></ul><h3 id="通过spawn创建新线程" tabindex="-1"><a class="header-anchor" href="#通过spawn创建新线程"><span>通过spawn创建新线程</span></a></h3><ul><li>使用thread::spawn函数来创建新线程 <ul><li>参数: 一个闭包(在新线程中运行的代码)</li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..</span><span class="token number">10</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;hi number {} from the spawned thread!&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..</span><span class="token number">5</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;hi number {} from the main thread&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通过join-handle来等待所有线程完成" tabindex="-1"><a class="header-anchor" href="#通过join-handle来等待所有线程完成"><span>通过join Handle来等待所有线程完成</span></a></h3><ul><li>thread::spawn 函数的返回值是 JoinHandle</li><li>JoinHandle 持有值的所有权 <ul><li>调用其join方法, 可以等待对应的其它线程的完成</li></ul></li><li>join方法: 调用handle 的join 方法会阻止当前运行的线程的执行,直到handle 所表示的这些线程的终结</li></ul><h3 id="使用move闭包" tabindex="-1"><a class="header-anchor" href="#使用move闭包"><span>使用move闭包</span></a></h3><ul><li>move 闭包通常和thread::spawn一起使用, 它允许你使用其它线程的数据</li><li>在创建线程的时候, 把值的所有权从一个线程转移到另一个线程</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> handle <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span>  <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Here&#39;s a vector {:?}&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    handle<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用消息传递来在线程间转移数据" tabindex="-1"><a class="header-anchor" href="#使用消息传递来在线程间转移数据"><span>使用消息传递来在线程间转移数据</span></a></h2><h3 id="消息传递" tabindex="-1"><a class="header-anchor" href="#消息传递"><span>消息传递</span></a></h3><ul><li><p>一种很流行且能保证安全并发的技术就说: 消息传递</p><ul><li>线程(或Actor)通过彼此发送消息(数据)来进行通信</li></ul></li><li><p>Go 语言的名言: 不要用共享内存来通信, 用通信来共享内存</p></li><li><p>Rust: Channel (标准库提供)</p></li></ul><h3 id="channel" tabindex="-1"><a class="header-anchor" href="#channel"><span>Channel</span></a></h3><ul><li>Channel 包含: 发送端,接收端</li><li>调用发送端的方法, 发送数据</li><li>接收端会检查和接收到达的数据</li><li>如果发送端, 接受端中任意一端被丢弃了, 那么Channel就关闭了</li></ul><h3 id="创建新的channel" tabindex="-1"><a class="header-anchor" href="#创建新的channel"><span>创建新的Channel</span></a></h3><ul><li>使用<code>mpsc::channel</code>函数创建一个新的channel <ul><li>mpsc表示multiple producer, single consumer(多个生产者, 一个消费者)</li><li>返回一个tuple(元组): 里面分别是发送端和接收端</li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span>mpsc<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token punctuation">(</span>tx<span class="token punctuation">,</span> rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> received <span class="token operator">=</span> rx<span class="token punctuation">.</span><span class="token function">recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Got:{}&quot;</span><span class="token punctuation">,</span> received<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="接收端的方法" tabindex="-1"><a class="header-anchor" href="#接收端的方法"><span>接收端的方法</span></a></h3><ul><li><ul><li>一旦有值收到, 就返回<code>Result&lt;T, E&gt;</code></li><li>当发送端关闭时, 返回一个错误值</li></ul></li><li><p>try_recv 方法: 不会阻止线程, 直接返回一个<code>Result&lt;T, E&gt;</code></p><ul><li>Ok 值包含可用的信息</li><li>否则, 返回一个错误值</li></ul></li><li><p>通常会使用循环调用来检查try_recv的结果</p></li></ul><h3 id="channel-和所有权转移" tabindex="-1"><a class="header-anchor" href="#channel-和所有权转移"><span>Channel 和所有权转移</span></a></h3><ul><li>所有权在消息传递中非常重要: 能帮你编写安全, 并发的代码</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span>mpsc<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token punctuation">(</span>tx<span class="token punctuation">,</span> rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;val is {}&quot;</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> received <span class="token operator">=</span> rx<span class="token punctuation">.</span><span class="token function">recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Got:{}&quot;</span><span class="token punctuation">,</span> received<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>println!(&quot;val is {}&quot;, val); 会报错: <code>value borrowed here after move</code></p><h3 id="发送多个值-看到接收者在等待" tabindex="-1"><a class="header-anchor" href="#发送多个值-看到接收者在等待"><span>发送多个值, 看到接收者在等待</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span>mpsc<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token punctuation">(</span>tx<span class="token punctuation">,</span> rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> vals <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span></span>
<span class="line">            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;from&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;the&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;thread&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> val <span class="token keyword">in</span> vals<span class="token punctuation">{</span></span>
<span class="line">            tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> received <span class="token keyword">in</span> rx<span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Got: {}&quot;</span><span class="token punctuation">,</span> received<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span>   </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通过克隆创建多个发送者" tabindex="-1"><a class="header-anchor" href="#通过克隆创建多个发送者"><span>通过克隆创建多个发送者</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span>mpsc<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token punctuation">(</span>tx<span class="token punctuation">,</span> rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> tx1 <span class="token operator">=</span> <span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token class-name">Sender</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> vals <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span></span>
<span class="line">            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;1:hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;1:from&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;1:the&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;1:thread&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> val <span class="token keyword">in</span> vals<span class="token punctuation">{</span></span>
<span class="line">            tx1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> vals <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span></span>
<span class="line">            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;from&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;the&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;thread&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> val <span class="token keyword">in</span> vals<span class="token punctuation">{</span></span>
<span class="line">            tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> received <span class="token keyword">in</span> rx<span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Got: {}&quot;</span><span class="token punctuation">,</span> received<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">   </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="共享状态的并发" tabindex="-1"><a class="header-anchor" href="#共享状态的并发"><span>共享状态的并发</span></a></h2><ul><li><p>Go 语言的名言: 不要用共享内存来通信, 用通信来共享内存</p></li><li><p>Rust 支持通过共享状态来实现并发</p></li><li><p>Channel 类似单所有权: 一旦将值的所有权转移至Channel, 就无法使用它了</p></li><li><p>共享内存并发类似多所有权, 多个线程可以同时访问同一块内存</p></li></ul><h3 id="使用mutex来每次只允许一格线程来访问数据" tabindex="-1"><a class="header-anchor" href="#使用mutex来每次只允许一格线程来访问数据"><span>使用Mutex来每次只允许一格线程来访问数据</span></a></h3><ul><li><p>Mutex是mutual exclusion(互斥锁)的简写</p></li><li><p>在同一时刻, Mutex只允许一个线程来访问某些数据</p></li><li><p>想要访问数据</p><ul><li>线程必须首先获取互斥锁 <ul><li>lock 数据结构是mutex的一部分, 它能跟踪谁对数据拥有独占访问权</li></ul></li><li>mutex 通常被描述为: 通过锁定系统来保护它所持有的数据</li></ul></li></ul><h3 id="mutex的两条规则" tabindex="-1"><a class="header-anchor" href="#mutex的两条规则"><span>Mutex的两条规则</span></a></h3><ul><li>在使用数据之前, 必须尝试获得锁(lock)</li><li>使用完mutex所保护的数据, 必须对数据进行解锁, 以便其它线程可以获取锁</li></ul><h3 id="mutex-t-的api" tabindex="-1"><a class="header-anchor" href="#mutex-t-的api"><span><code>Mutex&lt;T&gt;</code>的API</span></a></h3><ul><li><p>通过Mutex::new(数据)来创建<code>Mutex&lt;T&gt;</code></p><ul><li><code>Mutex&lt;T&gt;</code> 是一个智能指针</li></ul></li><li><p>访问数据前,通过lock方法来获取锁</p><ul><li>会阻塞当前线程</li><li>lock可能会失败</li><li>返回的是 MutexGuard (智能指针, 实现了Deref和Drop)</li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span><span class="token class-name">Mutex</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token class-name">Mutex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> <span class="token keyword">mut</span> num <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token operator">*</span>num <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;m = {:?}&quot;</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多线程共享mutex-t" tabindex="-1"><a class="header-anchor" href="#多线程共享mutex-t"><span>多线程共享<code>Mutex&lt;T&gt;</code></span></a></h3><h3 id="使用arc-t-来在多个线程间共享所有权" tabindex="-1"><a class="header-anchor" href="#使用arc-t-来在多个线程间共享所有权"><span>使用<code>Arc&lt;T&gt;</code>来在多个线程间共享所有权</span></a></h3><ul><li><p><code>Arc&lt;T&gt;</code>是atomically reference counted(原子引用计数)的缩写</p></li><li><p><code>Arc&lt;T&gt;</code> 和 <code>Rc&lt;T&gt;</code> 类似, 它可以用于并发场景</p></li><li><p>为什么所有的基础类型都不是原子的, 为什么标准库不默认使用<code>Arc&lt;T&gt;</code>?</p><ul><li>需要牺牲性能作为代价</li></ul></li><li><p><code>Arc&lt;T&gt;</code> 和 <code>Rc&lt;T&gt;</code> 的API是相同的</p></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Mutex</span><span class="token punctuation">,</span> <span class="token class-name">Arc</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Mutex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> handles <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token number">10</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">let</span> handle <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> <span class="token keyword">mut</span> num <span class="token operator">=</span> counter<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token operator">*</span>num <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        handles<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span>   </span>
<span class="line">    <span class="token keyword">for</span> handle <span class="token keyword">in</span> handles<span class="token punctuation">{</span></span>
<span class="line">        handle<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span>   </span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Result:{}&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>counter<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="refcell-t-rc-t-vs-mutex-t-arc-t" tabindex="-1"><a class="header-anchor" href="#refcell-t-rc-t-vs-mutex-t-arc-t"><span><code>RefCell&lt;T&gt;/Rc&lt;T&gt;</code> vs <code>Mutex&lt;T&gt;/Arc&lt;T&gt;</code></span></a></h3><ul><li><code>Mutex&lt;T&gt;</code> 提供了内部可变性, 和Cell家族一样</li><li>我们使用<code>RefCell&lt;T&gt;</code> 来改变<code>Rc&lt;T&gt;</code>里面的内容</li><li>我们使用<code>Mutex&lt;T&gt;</code> 来改变<code>Arc&lt;T&gt;</code>里面的内容</li><li>注意: <code>Mutex&lt;T&gt;</code>有死锁风险</li></ul><h2 id="使用sync和send-trait的可扩展并发" tabindex="-1"><a class="header-anchor" href="#使用sync和send-trait的可扩展并发"><span>使用Sync和Send trait的可扩展并发</span></a></h2><h3 id="send-和-sync-trait" tabindex="-1"><a class="header-anchor" href="#send-和-sync-trait"><span>Send 和 Sync trait</span></a></h3><ul><li>Rust 语言的并发特性较少, 目前讲的并发新特性都来自标准库(而不是语言本身)</li><li>无需局限于标准库的并发, 可以自己实现并发</li><li>但在Rust语言中有两个并发的概念: <ul><li>std::marker::Sync 和 std::marker::Send 这两个trait</li></ul></li></ul><h3 id="send-允许线程间转移所有权" tabindex="-1"><a class="header-anchor" href="#send-允许线程间转移所有权"><span>Send：允许线程间转移所有权</span></a></h3><ul><li>实现Send trait 的类型可在线程间转移所有权</li><li>Rust中几乎所有的类型都实现了Send <ul><li>但<code>Rc&lt;T&gt;</code>没有实现Send, 它只用于单线程场景</li></ul></li><li>任何完全由Send类型组成的类型也被标记为Send</li><li>除了原始指针之外, 几乎所有的基础类型都是Send</li></ul><h3 id="sync-允许从多线程访问" tabindex="-1"><a class="header-anchor" href="#sync-允许从多线程访问"><span>Sync: 允许从多线程访问</span></a></h3><ul><li>实现Sync的线程可以安全地被多个线程引用</li><li>也就是说: 如果T是Sync, 那么 &amp;T 就是Send <ul><li>引用可以被安全的送往另一个线程</li></ul></li><li>基础类型都是Sync</li><li>完全由Sync类型组成的类型也是Sync <ul><li>但, <code>Rc&lt;T&gt;</code> 不是Sync的</li><li><code>RefCell&lt;T&gt;</code> 和 <code>Cell&lt;T&gt;</code> 家族也不是Sync的</li><li>而, <code>Mutex&lt;T&gt;</code> 是Sync的</li></ul></li></ul><h3 id="手动来实现send和sync是不安全的" tabindex="-1"><a class="header-anchor" href="#手动来实现send和sync是不安全的"><span>手动来实现Send和Sync是不安全的</span></a></h3><ul><li>记住上面的话即可</li></ul>`,60)]))}const o=s(e,[["render",l],["__file","Fearless-concurrency.html.vue"]]),u=JSON.parse('{"path":"/rust-learning/Fearless-concurrency.html","title":"无畏并发","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"并发","slug":"并发","link":"#并发","children":[]},{"level":2,"title":"使用线程来同时运行代码","slug":"使用线程来同时运行代码","link":"#使用线程来同时运行代码","children":[{"level":3,"title":"进程与线程","slug":"进程与线程","link":"#进程与线程","children":[]},{"level":3,"title":"多线程可导致的问题","slug":"多线程可导致的问题","link":"#多线程可导致的问题","children":[]},{"level":3,"title":"实现线程的方式","slug":"实现线程的方式","link":"#实现线程的方式","children":[]},{"level":3,"title":"通过spawn创建新线程","slug":"通过spawn创建新线程","link":"#通过spawn创建新线程","children":[]},{"level":3,"title":"通过join Handle来等待所有线程完成","slug":"通过join-handle来等待所有线程完成","link":"#通过join-handle来等待所有线程完成","children":[]},{"level":3,"title":"使用move闭包","slug":"使用move闭包","link":"#使用move闭包","children":[]}]},{"level":2,"title":"使用消息传递来在线程间转移数据","slug":"使用消息传递来在线程间转移数据","link":"#使用消息传递来在线程间转移数据","children":[{"level":3,"title":"消息传递","slug":"消息传递","link":"#消息传递","children":[]},{"level":3,"title":"Channel","slug":"channel","link":"#channel","children":[]},{"level":3,"title":"创建新的Channel","slug":"创建新的channel","link":"#创建新的channel","children":[]},{"level":3,"title":"接收端的方法","slug":"接收端的方法","link":"#接收端的方法","children":[]},{"level":3,"title":"Channel 和所有权转移","slug":"channel-和所有权转移","link":"#channel-和所有权转移","children":[]},{"level":3,"title":"发送多个值, 看到接收者在等待","slug":"发送多个值-看到接收者在等待","link":"#发送多个值-看到接收者在等待","children":[]},{"level":3,"title":"通过克隆创建多个发送者","slug":"通过克隆创建多个发送者","link":"#通过克隆创建多个发送者","children":[]}]},{"level":2,"title":"共享状态的并发","slug":"共享状态的并发","link":"#共享状态的并发","children":[{"level":3,"title":"使用Mutex来每次只允许一格线程来访问数据","slug":"使用mutex来每次只允许一格线程来访问数据","link":"#使用mutex来每次只允许一格线程来访问数据","children":[]},{"level":3,"title":"Mutex的两条规则","slug":"mutex的两条规则","link":"#mutex的两条规则","children":[]},{"level":3,"title":"Mutex<T>的API","slug":"mutex-t-的api","link":"#mutex-t-的api","children":[]},{"level":3,"title":"多线程共享Mutex<T>","slug":"多线程共享mutex-t","link":"#多线程共享mutex-t","children":[]},{"level":3,"title":"使用Arc<T>来在多个线程间共享所有权","slug":"使用arc-t-来在多个线程间共享所有权","link":"#使用arc-t-来在多个线程间共享所有权","children":[]},{"level":3,"title":"RefCell<T>/Rc<T> vs Mutex<T>/Arc<T>","slug":"refcell-t-rc-t-vs-mutex-t-arc-t","link":"#refcell-t-rc-t-vs-mutex-t-arc-t","children":[]}]},{"level":2,"title":"使用Sync和Send trait的可扩展并发","slug":"使用sync和send-trait的可扩展并发","link":"#使用sync和send-trait的可扩展并发","children":[{"level":3,"title":"Send 和 Sync trait","slug":"send-和-sync-trait","link":"#send-和-sync-trait","children":[]},{"level":3,"title":"Send：允许线程间转移所有权","slug":"send-允许线程间转移所有权","link":"#send-允许线程间转移所有权","children":[]},{"level":3,"title":"Sync: 允许从多线程访问","slug":"sync-允许从多线程访问","link":"#sync-允许从多线程访问","children":[]},{"level":3,"title":"手动来实现Send和Sync是不安全的","slug":"手动来实现send和sync是不安全的","link":"#手动来实现send和sync是不安全的","children":[]}]}],"git":{"updatedTime":1731474374000,"contributors":[{"name":"pingzhihe","email":"pzh1760473545@gmail.com","commits":1,"url":"https://github.com/pingzhihe"}]},"filePathRelative":"rust-learning/Fearless-concurrency.md"}');export{o as comp,u as data};
