import{_ as s,c as a,a as p,o as t}from"./app-DsOgR8nk.js";const e={};function l(i,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="life-time-生命周期" tabindex="-1"><a class="header-anchor" href="#life-time-生命周期"><span>life time:生命周期</span></a></h1><ul><li>Rust 的每一个引用都有自己的生命周期</li><li>生命周期: 引用保持有效的作用域</li><li>大部分时候生命周期是隐含并可以推断的，正如大部分时候类型也是可以推断的一样</li><li>当引用的生命周期可能以不同的方式相互关联时: 手动标注生命周期</li></ul><h2 id="生命周期-避免悬垂引用-dangling-reference" tabindex="-1"><a class="header-anchor" href="#生命周期-避免悬垂引用-dangling-reference"><span>生命周期-避免悬垂引用(dangling reference)</span></a></h2><ul><li>悬垂引用: 指向了其数据被释放的内存</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> r<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line">            r <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;r: {}&quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出报错: <code>\`x\` does not live long enough</code></p><h2 id="借用检查器" tabindex="-1"><a class="header-anchor" href="#借用检查器"><span>借用检查器</span></a></h2><ul><li>Rust 编译器有一个 借用检查器(borrow checker) 来比较作用域来确保所有的借用都是有效的 图示:</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> r<span class="token punctuation">;</span>                <span class="token comment">//----------+-- &#39;a</span></span>
<span class="line">                              <span class="token comment">//          |</span></span>
<span class="line">        <span class="token punctuation">{</span>                     <span class="token comment">//          |</span></span>
<span class="line">        <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>            <span class="token comment">// -+-- &#39;b  |</span></span>
<span class="line">            r <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span>           <span class="token comment">//  |       |</span></span>
<span class="line">        <span class="token punctuation">}</span>                     <span class="token comment">// -+       |</span></span>
<span class="line">                              <span class="token comment">//          |</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;r: {}&quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//----------+</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以通过编译了</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;r: {}&quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数中的泛型生命周期" tabindex="-1"><a class="header-anchor" href="#函数中的泛型生命周期"><span>函数中的泛型生命周期</span></a></h2><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> string1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> string2 <span class="token operator">=</span> <span class="token string">&quot;xyz&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">longest</span><span class="token punctuation">(</span>string1<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> string2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The longest string is {}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">longest</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> x<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> y<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        x</span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        y</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>报错: <code>expected named lifetime parameter</code> 纠正:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">longest</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span>  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> x<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> y<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        x</span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        y</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生命周期标注" tabindex="-1"><a class="header-anchor" href="#生命周期标注"><span>生命周期标注</span></a></h2><ul><li>生命周期标注并不改变任何引用的生命周期的长短</li><li>当指定了泛型生命周期, 函数可以接受带有任何生命周期的引用。</li><li>生命周期标注: 描述了多个引用生命周期相互的关系, 而不影响其生命周期</li></ul><h3 id="生命周期标注-语法" tabindex="-1"><a class="header-anchor" href="#生命周期标注-语法"><span>生命周期标注-语法</span></a></h3><ul><li><p>生命周期参数名:</p><ul><li>以撇号(&#39;)开头</li><li>通常小写且非常短, 如: &#39;a</li></ul></li><li><p>生命周期标注的位置:</p><ul><li>在引用的 &amp; 之后</li><li>使用空格将标注和引用类型分开</li></ul></li></ul><h3 id="生命周期标注-例子" tabindex="-1"><a class="header-anchor" href="#生命周期标注-例子"><span>生命周期标注-例子</span></a></h3><ul><li><p>&amp;i32 // 引用</p></li><li><p>&amp;&#39;a i32 // 带有显式生命周期的引用</p></li><li><p>&amp;&#39;a mut i32 // 带有显式生命周期的可变引用</p></li><li><p>单个生命周期标注没有意义</p></li></ul><h3 id="函数签名中的生命周期标注" tabindex="-1"><a class="header-anchor" href="#函数签名中的生命周期标注"><span>函数签名中的生命周期标注</span></a></h3><ul><li>泛型生命周期参数声明在: 函数名和参数列表之间的尖括号&lt;&gt;中 <ul><li><code>fn longest&lt;&#39;a&gt; (x: &amp;&#39;a str, y: &amp;&#39;a str) -&gt; &amp;&#39;a str {</code></li><li>当我们把具体的引用传入longest 函数时, 被用来替代&#39;a 的具体生命周期是 x 的作用域与 y 的作用域相重叠的那一部分。而且返回值的生命周期也是 <code>\`a</code>。</li></ul></li></ul><h2 id="深入了解生命周期" tabindex="-1"><a class="header-anchor" href="#深入了解生命周期"><span>深入了解生命周期</span></a></h2><ul><li>指定生命周期参数的方式依赖于函数所作的事情</li><li>从函数返回引用时，返回类型的生命周期参数需要与一个参数的生命周期参数相匹配</li><li>如果返回的引用 没有 指向任何一个参数, 那么唯一的可能就是它指向一个函数内部创建的值。 <ul><li>这就是悬垂引用的情况: 该值在函数结束时走出了作用域</li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">longest</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span>  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;really long string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    result<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>报错: <code>\`result\` does not live long enough</code></p><ul><li>修正: 返回 String 而不是 &amp;str</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">longest</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span><span class="token class-name">String</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;really long string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    result            </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就相当于把所有权转移给了调用者。</p><h2 id="struct-中的生命周期" tabindex="-1"><a class="header-anchor" href="#struct-中的生命周期"><span>Struct 中的生命周期</span></a></h2><ul><li>Struct 里可以包括: <ul><li>自持有的类型</li><li>引用: 需要在每个引用上添加生命周期标注</li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">ImportantExcerpt</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    part<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> novel <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Call me Ishmael. Some years ago...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> first_sentence <span class="token operator">=</span> novel<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Could not find a &#39;.&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token class-name">ImportantExcerpt</span> <span class="token punctuation">{</span></span>
<span class="line">         part<span class="token punctuation">:</span> first_sentence </span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">.</span>part<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生命周期的省略" tabindex="-1"><a class="header-anchor" href="#生命周期的省略"><span>生命周期的省略</span></a></h2><ul><li>我们知道: <ul><li>每一个引用都有其生命周期</li><li>需要为函数中的每一个引用都标注生命周期</li></ul></li><li>在 Rust 引用分析中所编入的模式被称为 生命周期省略规则(lifetime elision rules) <ul><li>这些规则无需在大部分情况下手动标注生命周期</li></ul></li><li>生命周期省略规则并不提供完整的推断: <ul><li>如果应用规则后, 引用的生命周期仍然模糊不清 -&gt; 编译器报错</li><li>解决办法: 显式标注生命周期</li></ul></li></ul><h2 id="输入输出生命周期" tabindex="-1"><a class="header-anchor" href="#输入输出生命周期"><span>输入输出生命周期</span></a></h2><ul><li>生命周期在: <ul><li>函数/方法的参数: 输入生命周期</li><li>函数/方法的返回值: 输出生命周期</li></ul></li></ul><h3 id="生命周期省略的三个规则" tabindex="-1"><a class="header-anchor" href="#生命周期省略的三个规则"><span>生命周期省略的三个规则</span></a></h3><ul><li><p>编译器使用三个规则在没有显式标注生命周期的情况下， 来确定引用的生命周期：</p><ul><li>第一条规则适用于输入生命周期，后两条规则适用于输出生命周期。</li><li>如果编译器检查完这三条规则后仍然存在没有计算出生命周期的引用，编译器将会停止并生成错误。</li><li>这些规则适用于 fn 定义，以及 impl 块。</li></ul></li><li><p>规则1: 每一个是引用的参数都有它自己的生命周期参数</p></li><li><p>规则2: 如果只有一个输入生命周期参数，那么该生命周期参数被赋予所有输出生命周期参数</p></li><li><p>规则3: 如果方法有多个输入生命周期参数并且其中一个参数是 &amp;self 或 &amp;mut self，说明是个对象的方法(method), 那么所有输出生命周期参数被赋予 self 的生命周期</p></li></ul><h2 id="生命周期省略的三个规则-例子" tabindex="-1"><a class="header-anchor" href="#生命周期省略的三个规则-例子"><span>生命周期省略的三个规则-例子</span></a></h2><ul><li><p>假设我们是编译器</p></li><li><p><code>fn first_word(s: &amp;str) -&gt; &amp;str {</code></p></li><li><p><code>fn first_word&lt;&#39;a&gt;(s: &amp;&#39;a str) -&gt; &amp;str {</code></p></li><li><p><code>fn first_word&lt;&#39;a&gt;(s: &amp;&#39;a str) -&gt; &amp;&#39;a str {</code><br> 这里编译器可以成功推断出生命周期,因为只有一个输入生命周期参数,所以规则2适用,输出生命周期参数被赋予输入生命周期参数</p></li><li><p><code>fn longest(x: &amp;str, y: &amp;str) -&gt; &amp;str {</code></p></li><li><p><code>fn longest&lt;&#39;a,&#39;b&gt;(x: &amp;&#39;a str, y: &amp;&#39;b str) -&gt; &amp;str {</code><br> 两个参数都有自己的生命周期,第二条规则不适用,没有<code>&amp;self</code>参数,第三条规则不适用。无法计算出返回值的生命周期, 编译器报错。</p></li></ul><h2 id="方法定义中的生命周期标注" tabindex="-1"><a class="header-anchor" href="#方法定义中的生命周期标注"><span>方法定义中的生命周期标注</span></a></h2><ul><li><p>在struct 上使用生命周期实现方法,语法和泛型参数的语法一样</p></li><li><p>在哪声明和使用生命周期参数, 依赖于:</p><ul><li>生命周期参数是否和字段,方法的参数或返回值有关</li></ul></li><li><p>struct 字段的生命周期名:</p><ul><li>在<code>impl</code>后声明</li><li>在<code>struct</code>名后使用</li><li>这些生命周期是struct类型的一部分</li></ul></li><li><p><code>impl</code> 块内的方法签名中：</p><ul><li>引用必须绑定于struct字段引用的生命周期, 或者引用是独立的也可以</li><li>生命周期省略规则经常使得方法中的生命周期标注不是必须的</li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">ImportantExcerpt</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    part<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span> <span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token class-name">ImportantExcerpt</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">level</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token number">3</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">//  根据第三个规则, 这里的返回值的生命周期被赋予了self的生命周期</span></span>
<span class="line">    <span class="token comment">// announcement 和返回值的生命周期都可以省略</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">announce_and_return_part</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> announcement<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Attention please: {}&quot;</span><span class="token punctuation">,</span> announcement<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>part</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> novel <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Call me Ishmael. Some years ago...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> first_sentence <span class="token operator">=</span> novel<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Could not find a &#39;.&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token class-name">ImportantExcerpt</span> <span class="token punctuation">{</span></span>
<span class="line">         part<span class="token punctuation">:</span> first_sentence </span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">.</span>part<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="静态生命周期" tabindex="-1"><a class="header-anchor" href="#静态生命周期"><span>静态生命周期</span></a></h2><ul><li><p><code>&#39;static</code> 是一个特殊的生命周期, 代表整个程序的运行时间</p></li><li><p>所有的字符串字面值都拥有 <code> &#39;static</code> 生命周期</p><ul><li><code>let s: &amp;&#39;static str = &quot;I have a static lifetime.&quot;;</code></li></ul></li><li><p>为引用指定<code>&#39;static</code> 生命周期前要三思:</p><ul><li>是否需要引用在程序整个生命周期内都存活。</li></ul></li></ul><h2 id="泛型类型参数-trait-bound-和生命周期" tabindex="-1"><a class="header-anchor" href="#泛型类型参数-trait-bound-和生命周期"><span>泛型类型参数, trait bound 和生命周期</span></a></h2><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Display</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">longest_with_an_announcement</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span></span>
<span class="line">    x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span> ann<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span></span>
<span class="line">    <span class="token keyword">where</span> <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Display</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Announcement! {}&quot;</span><span class="token punctuation">,</span> ann<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> x<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> y<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        x</span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        y</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> string1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> string2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;xyz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">longest_with_an_announcement</span><span class="token punctuation">(</span></span>
<span class="line">        string1<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> string2<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Today is someone&#39;s birthday!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The longest string is {}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,48)]))}const c=s(e,[["render",l],["__file","Life-time.html.vue"]]),u=JSON.parse('{"path":"/rust-learning/Life-time.html","title":"life time:生命周期","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"生命周期-避免悬垂引用(dangling reference)","slug":"生命周期-避免悬垂引用-dangling-reference","link":"#生命周期-避免悬垂引用-dangling-reference","children":[]},{"level":2,"title":"借用检查器","slug":"借用检查器","link":"#借用检查器","children":[]},{"level":2,"title":"函数中的泛型生命周期","slug":"函数中的泛型生命周期","link":"#函数中的泛型生命周期","children":[]},{"level":2,"title":"生命周期标注","slug":"生命周期标注","link":"#生命周期标注","children":[{"level":3,"title":"生命周期标注-语法","slug":"生命周期标注-语法","link":"#生命周期标注-语法","children":[]},{"level":3,"title":"生命周期标注-例子","slug":"生命周期标注-例子","link":"#生命周期标注-例子","children":[]},{"level":3,"title":"函数签名中的生命周期标注","slug":"函数签名中的生命周期标注","link":"#函数签名中的生命周期标注","children":[]}]},{"level":2,"title":"深入了解生命周期","slug":"深入了解生命周期","link":"#深入了解生命周期","children":[]},{"level":2,"title":"Struct 中的生命周期","slug":"struct-中的生命周期","link":"#struct-中的生命周期","children":[]},{"level":2,"title":"生命周期的省略","slug":"生命周期的省略","link":"#生命周期的省略","children":[]},{"level":2,"title":"输入输出生命周期","slug":"输入输出生命周期","link":"#输入输出生命周期","children":[{"level":3,"title":"生命周期省略的三个规则","slug":"生命周期省略的三个规则","link":"#生命周期省略的三个规则","children":[]}]},{"level":2,"title":"生命周期省略的三个规则-例子","slug":"生命周期省略的三个规则-例子","link":"#生命周期省略的三个规则-例子","children":[]},{"level":2,"title":"方法定义中的生命周期标注","slug":"方法定义中的生命周期标注","link":"#方法定义中的生命周期标注","children":[]},{"level":2,"title":"静态生命周期","slug":"静态生命周期","link":"#静态生命周期","children":[]},{"level":2,"title":"泛型类型参数, trait bound 和生命周期","slug":"泛型类型参数-trait-bound-和生命周期","link":"#泛型类型参数-trait-bound-和生命周期","children":[]}],"git":{"updatedTime":1731216681000,"contributors":[{"name":"pingzhihe","email":"pzh1760473545@gmail.com","commits":1,"url":"https://github.com/pingzhihe"}]},"filePathRelative":"rust-learning/Life-time.md"}');export{c as comp,u as data};
