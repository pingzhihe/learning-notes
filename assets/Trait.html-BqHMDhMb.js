import{_ as s,c as a,a as p,o as t}from"./app-DsOgR8nk.js";const e={};function l(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="泛型-trait" tabindex="-1"><a class="header-anchor" href="#泛型-trait"><span>泛型， Trait</span></a></h1><h2 id="提取函数消除重复" tabindex="-1"><a class="header-anchor" href="#提取函数消除重复"><span>提取函数消除重复</span></a></h2><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">largest</span><span class="token punctuation">(</span>list<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> largest <span class="token operator">=</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token operator">&amp;</span>number <span class="token keyword">in</span> list <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> number <span class="token operator">&gt;</span> largest <span class="token punctuation">{</span></span>
<span class="line">            largest <span class="token operator">=</span> number<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    largest</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> num_list <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">largest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>num_list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The largest number is {}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你写 <code>for number in list</code> 时，<code>number</code> 实际上是每个元素的引用，因为 <code>list</code>是一个切片引用。在这种情况下，<code>number</code> 的类型是 <code>&amp;i32</code>。<br> 当你写 <code>for &amp;number in list</code> 时，你实际上是在使用模式匹配来解引用每个元素，使得 <code>number</code> 直接获得了元素的值，而不是它们的引用。在这种情况下，<code>number</code> 的类型是 <code>i32</code>。<br><code>&amp;i32</code> = &amp;<code>i32</code></p><ul><li>泛型: 提高代码的复用能力 <ul><li>处理重复代码的问题</li></ul></li><li>泛型是具体类型或其他属性的抽象代替: <ul><li>你编写的代码不是最终代码, 而是一个模板, 里面有一些&quot;占位符&quot;</li><li>编译器在编译的时将占位符替代为具体的类型。</li></ul></li><li>例如: <code>fn largest&lt;T&gt;(list: &amp;[T]) -&gt; T {}</code><ul><li>T 是一个占位符, 代表任何类型</li></ul></li><li>该函数可以接受任何类型的 slice, 并返回同样类型的值</li><li>类型参数: <ul><li>很短, 通常一个字母</li><li>CamalCase</li><li>T: Type的缩写</li></ul></li></ul><h2 id="函数定义中使用泛型" tabindex="-1"><a class="header-anchor" href="#函数定义中使用泛型"><span>函数定义中使用泛型</span></a></h2><ul><li>泛型函数 <ul><li>参数类型</li></ul></li><li>返回值类型<br> 会在后面详细解释</li></ul><h2 id="struct中定义中使用泛型" tabindex="-1"><a class="header-anchor" href="#struct中定义中使用泛型"><span>Struct中定义中使用泛型</span></a></h2><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span></span>
<span class="line">    y<span class="token punctuation">:</span> <span class="token class-name">U</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> integer <span class="token operator">=</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> float <span class="token operator">=</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">4.0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;integer.x = {}, integer.y = {}&quot;</span><span class="token punctuation">,</span> integer<span class="token punctuation">.</span>x<span class="token punctuation">,</span> integer<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;float.x = {}, float.y = {}&quot;</span><span class="token punctuation">,</span> float<span class="token punctuation">.</span>x<span class="token punctuation">,</span> float<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>T 和 U 代表了Point里x和y可以是不同的类型</p><h2 id="枚举定义中使用泛型" tabindex="-1"><a class="header-anchor" href="#枚举定义中使用泛型"><span>枚举定义中使用泛型</span></a></h2><ul><li>可以让枚举的变体持有泛型数据类型 <ul><li>例如 <code>Option&lt;T&gt;</code>,<code>Result&lt;T, E&gt;</code></li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token type-definition class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">None</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">enum</span> <span class="token type-definition class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="方法定义中使用泛型" tabindex="-1"><a class="header-anchor" href="#方法定义中使用泛型"><span>方法定义中使用泛型</span></a></h2><ul><li>为struct和enum定义方法的时候, 可以在定义中使用泛型</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span></span>
<span class="line">    y<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">x</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token class-name">T</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>x</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意: <ul><li>把 T 放在impl关键字后, 表示在类型T上实现的方法 <ul><li>例如: <code>impl&lt;T&gt; Point&lt;T&gt; {}</code></li></ul></li><li>只针对具体类型实现方法(其余类型没实现方法): <ul><li>例如: <code>impl Point&lt;f32&gt; {}</code> (这里impl后没有<code>&lt;T&gt;</code>)</li></ul></li></ul></li></ul><h2 id="泛型代码的性能" tabindex="-1"><a class="header-anchor" href="#泛型代码的性能"><span>泛型代码的性能</span></a></h2><ul><li>使用泛型的代码和使用具体类型的代码运行速度是一样的</li><li>Rust通过在编译时进行泛型代码的单态化(monomorphization)来保证效率 <ul><li>单态化: 将泛型代码转换为特定代码的过程</li></ul></li></ul><h1 id="trait" tabindex="-1"><a class="header-anchor" href="#trait"><span>Trait</span></a></h1><ul><li>Trait 告诉Rust 编译器: <ul><li>某些类型具有哪些并且可以与其它类型共享的功能</li></ul></li><li>可以通过 trait 以一种抽象的方式定义共享的行为</li><li>Trait bounds(约束): 泛型类型参数指定为是实现了特定行为的类型</li></ul><h2 id="定义一个trait" tabindex="-1"><a class="header-anchor" href="#定义一个trait"><span>定义一个Trait</span></a></h2><ul><li>Trait 的定义: 把方法签名放在一起, 来定义实现某种目的的所必需的一组行为 <ul><li>关键词: trait</li><li>只有方法签名, 没有具体实现</li><li>trait 可以有多个方法: 每个方法签名占一行,以; 结尾</li><li>实现该trait的类型必须提供具体的方法实现</li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">Summary</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在类型上实现trait" tabindex="-1"><a class="header-anchor" href="#在类型上实现trait"><span>在类型上实现trait</span></a></h2><ul><li>与为类型实现方法类似</li><li>syntax： <code>impl Trait for Type {}</code></li><li>在impl 的块内, 需要对trait方法签名提供具体的实现</li></ul><p>lib.rs:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">Summary</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">NewsArticle</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">pub</span> headline<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">pub</span> location<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">pub</span> author<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">pub</span> content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">impl</span> <span class="token class-name">Summary</span> <span class="token keyword">for</span> <span class="token class-name">NewsArticle</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;{}, by {} ({})&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>headline<span class="token punctuation">,</span><span class="token keyword">self</span><span class="token punctuation">.</span>author<span class="token punctuation">,</span><span class="token keyword">self</span><span class="token punctuation">.</span>location<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Tweet</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">pub</span> username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">pub</span> content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">pub</span> reply<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">pub</span> retweet<span class="token punctuation">:</span><span class="token keyword">bool</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span> <span class="token class-name">Summary</span> <span class="token keyword">for</span> <span class="token class-name">Tweet</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;{}: {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>username<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main.rs:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> _generics<span class="token punctuation">::</span><span class="token class-name">Summary</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> _generics<span class="token punctuation">::</span><span class="token class-name">Tweet</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> tweet <span class="token operator">=</span> <span class="token class-name">Tweet</span> <span class="token punctuation">{</span></span>
<span class="line">        username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;horse_ebooks&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;of course, as you probably already know, people&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        reply<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">        retweet<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;1 new tweet: {}&quot;</span><span class="token punctuation">,</span> tweet<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会输出: <code>1 new tweet: horse_ebooks: of course, as you probably already know, people</code></p><h2 id="实现trait的约束" tabindex="-1"><a class="header-anchor" href="#实现trait的约束"><span>实现Trait的约束</span></a></h2><ul><li>可以在某个类型上实现某个trait的前提条件是: <ul><li>这个类型或这个trait是在本地的crate里定义的</li></ul></li><li>无法为外部类型来实现外部的trait <ul><li>例如: 无法为<code>Vec&lt;T&gt;</code>实现<code>Display trait</code><ul><li>因为<code>Vec&lt;T&gt;</code>和<code>Display trait</code>都是在标准库中定义的</li></ul></li><li>这个限制是程序属性的一部分(也就是一致性)</li><li>具体说是孤儿规则(orphan rule): 之所以这样命名是因为父类型不存在</li><li>此规则确保其他人的代码不会破坏你的代码, 反之亦然</li><li>如果没有这个规则, 两个crate可以分别对相同类型实现相同的trait, 且Rust不知道该使用哪个实现</li></ul></li></ul><h2 id="默认实现" tabindex="-1"><a class="header-anchor" href="#默认实现"><span>默认实现</span></a></h2><p>默认实现的方法可以调用同一个trait中的其他方法</p><h2 id="trait作为参数" tabindex="-1"><a class="header-anchor" href="#trait作为参数"><span>trait作为参数</span></a></h2><ul><li>语法: <code>impl Trait</code></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token keyword">impl</span> <span class="token class-name">Summary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Breaking news! {}&quot;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Trait bound 语法: <code>Trait + Trait</code> 课用于更复杂的情况</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Summary</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Breaking news! {}&quot;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>语法糖: <code>impl Trait</code> 等价于 <code>impl&lt;T&gt; Trait for T {}</code></li><li>使用+指定多个trait bound</li><li>trait bound 使用where子句 <ul><li>在方法签名后指定where子句</li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Summary</span> <span class="token operator">+</span> <span class="token class-name">Display</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token punctuation">:</span> <span class="token class-name">Clone</span> <span class="token operator">+</span> <span class="token class-name">Debug</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token class-name">U</span><span class="token punctuation">)</span><span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;Breaking news! {}&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等用于:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">notify2</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token class-name">U</span><span class="token punctuation">)</span><span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> </span>
<span class="line"><span class="token keyword">where</span> <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Summary</span> <span class="token operator">+</span> <span class="token class-name">Display</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">U</span><span class="token punctuation">:</span> <span class="token class-name">Clone</span> <span class="token operator">+</span> <span class="token class-name">Debug</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;Breaking news! {}&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现trait作为返回类型" tabindex="-1"><a class="header-anchor" href="#实现trait作为返回类型"><span>实现Trait作为返回类型</span></a></h2><ul><li>语法: <code>-&gt; impl Trait</code></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">notify3</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">impl</span> <span class="token class-name">Summary</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">NewsArticle</span><span class="token punctuation">{</span></span>
<span class="line">        headline<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Rust is the best language&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        author<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;The Rust Team&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        location<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Everywhere&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>限制: 一个函数只能返回一个具体类型 <ul><li>不能返回<code>NewsArticle</code>和<code>Tweet</code></li></ul></li></ul><h2 id="使用trait-bound-的例子" tabindex="-1"><a class="header-anchor" href="#使用trait-bound-的例子"><span>使用trait bound 的例子</span></a></h2><p>修复以下代码：</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">largest</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>list<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">T</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> largest <span class="token operator">=</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token operator">&amp;</span>item <span class="token keyword">in</span> list<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> item <span class="token operator">&gt;</span> largest <span class="token punctuation">{</span></span>
<span class="line">            largest <span class="token operator">=</span> item<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    largest</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> number_list <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">largest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>number_list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The largest number is {}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>问题: 无法编译 <ul><li>因为<code>&gt;</code>不能用于所有类型</li></ul></li><li>解决: 使用trait bound <ul><li>T必须实现<code>PartialOrd</code> trait</li><li>T必须实现<code>Copy</code> trait</li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">largest</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>list<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">T</span></span>
<span class="line"><span class="token keyword">where</span> <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">PartialOrd</span> <span class="token operator">+</span> <span class="token class-name">Copy</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> largest <span class="token operator">=</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token operator">&amp;</span>item <span class="token keyword">in</span> list<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> item <span class="token operator">&gt;</span> largest <span class="token punctuation">{</span> <span class="token comment">// std::cmp::PartialOrd</span></span>
<span class="line">            largest <span class="token operator">=</span> item<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    largest</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用trait-bound-有条件的实现方法" tabindex="-1"><a class="header-anchor" href="#使用trait-bound-有条件的实现方法"><span>使用trait bound 有条件的实现方法</span></a></h2><ul><li>在使用泛型类型参数的impl块上使用trait bound, 我们可以有条件的只为那些实现了特定trait的类型实现方法</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Pair</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span></span>
<span class="line">    y<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span> <span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">Self</span> <span class="token punctuation">{</span>x<span class="token punctuation">,</span> y<span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span> <span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Display</span> <span class="token operator">+</span> <span class="token class-name">PartialOrd</span><span class="token operator">&gt;</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">cmp_display</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x <span class="token operator">&gt;=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>y <span class="token punctuation">{</span></span>
<span class="line">            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The largest member is x = {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The largest member is y = {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,56)]))}const o=s(e,[["render",l],["__file","Trait.html.vue"]]),u=JSON.parse('{"path":"/rust-learning/Trait.html","title":"泛型， Trait","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"提取函数消除重复","slug":"提取函数消除重复","link":"#提取函数消除重复","children":[]},{"level":2,"title":"函数定义中使用泛型","slug":"函数定义中使用泛型","link":"#函数定义中使用泛型","children":[]},{"level":2,"title":"Struct中定义中使用泛型","slug":"struct中定义中使用泛型","link":"#struct中定义中使用泛型","children":[]},{"level":2,"title":"枚举定义中使用泛型","slug":"枚举定义中使用泛型","link":"#枚举定义中使用泛型","children":[]},{"level":2,"title":"方法定义中使用泛型","slug":"方法定义中使用泛型","link":"#方法定义中使用泛型","children":[]},{"level":2,"title":"泛型代码的性能","slug":"泛型代码的性能","link":"#泛型代码的性能","children":[]},{"level":2,"title":"定义一个Trait","slug":"定义一个trait","link":"#定义一个trait","children":[]},{"level":2,"title":"在类型上实现trait","slug":"在类型上实现trait","link":"#在类型上实现trait","children":[]},{"level":2,"title":"实现Trait的约束","slug":"实现trait的约束","link":"#实现trait的约束","children":[]},{"level":2,"title":"默认实现","slug":"默认实现","link":"#默认实现","children":[]},{"level":2,"title":"trait作为参数","slug":"trait作为参数","link":"#trait作为参数","children":[]},{"level":2,"title":"实现Trait作为返回类型","slug":"实现trait作为返回类型","link":"#实现trait作为返回类型","children":[]},{"level":2,"title":"使用trait bound 的例子","slug":"使用trait-bound-的例子","link":"#使用trait-bound-的例子","children":[]},{"level":2,"title":"使用trait bound 有条件的实现方法","slug":"使用trait-bound-有条件的实现方法","link":"#使用trait-bound-有条件的实现方法","children":[]}],"git":{"updatedTime":1731216681000,"contributors":[{"name":"pingzhihe","email":"pzh1760473545@gmail.com","commits":2,"url":"https://github.com/pingzhihe"}]},"filePathRelative":"rust-learning/Trait.md"}');export{o as comp,u as data};
