import{_ as s,c as a,a as e,o as t}from"./app-DsOgR8nk.js";const p={};function l(i,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="编写自动化测试" tabindex="-1"><a class="header-anchor" href="#编写自动化测试"><span>编写自动化测试</span></a></h1><h2 id="编写和运行测试" tabindex="-1"><a class="header-anchor" href="#编写和运行测试"><span>编写和运行测试</span></a></h2><h3 id="测试-函数" tabindex="-1"><a class="header-anchor" href="#测试-函数"><span>测试(函数)</span></a></h3><ul><li><p>测试:</p><ul><li>函数</li><li>验证非测试代码的功能是否和预期一致</li></ul></li><li><p>测试函数体(通常)执行的3个操作</p><ul><li>准备数据/状态</li><li>运行被测试的代码</li><li>断言(Assert)结果</li></ul></li></ul><h3 id="解剖测试函数" tabindex="-1"><a class="header-anchor" href="#解剖测试函数"><span>解剖测试函数</span></a></h3><ul><li>测试函数需要使用test属性(attribute)进行标注 <ul><li>Attribute 就是一段Rust代码的元数据</li><li>在函数上加上<code>#[test]</code>, 可以把一个函数变成测试函数</li></ul></li></ul><h3 id="运行测试" tabindex="-1"><a class="header-anchor" href="#运行测试"><span>运行测试</span></a></h3><ul><li><p>使用 <code>cargo test</code> 命令运行所有的测试函数</p><ul><li>Rust 会构建一个 Test Runner 可执行文件</li><li>Test Runner 会运行所有测试函数并报告结果是否成功</li></ul></li><li><p>当使用cargo 创建library项目的时候, 会生成一个test module, 里面有一个test 函数</p><ul><li>你可以添加任意数量的test module 或函数</li></ul></li></ul><p><code>lib.rs</code>里:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token attribute attr-name">#[cfg(test)]</span></span>
<span class="line"><span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute attr-name">#[test]</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">exploration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试失败" tabindex="-1"><a class="header-anchor" href="#测试失败"><span>测试失败</span></a></h3><ul><li>测试函数panic 就表示失败</li><li>每个函数都运行在一个新线程</li><li>当主线程看到某个测试现场挂了, 那个测试标记为失败了</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token attribute attr-name">#[cfg(test)]</span></span>
<span class="line"><span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute attr-name">#[test]</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">exploration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token attribute attr-name">#[test]</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">another</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Make this test fail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="断言-assert" tabindex="-1"><a class="header-anchor" href="#断言-assert"><span>断言(Assert)</span></a></h2><h3 id="使用assert-宏检查测试结果" tabindex="-1"><a class="header-anchor" href="#使用assert-宏检查测试结果"><span>使用assert! 宏检查测试结果</span></a></h3><ul><li>assert! 宏, 来在标准库, 用来确定某个状态是否为true <ul><li>true, 测试通过</li><li>false, 测试失败, 并调用panic</li></ul></li></ul><h3 id="使用assert-eq-和-assert-ne-测试相等性" tabindex="-1"><a class="header-anchor" href="#使用assert-eq-和-assert-ne-测试相等性"><span>使用assert_eq! 和 assert_ne! 测试相等性</span></a></h3><ul><li>都来自标准库</li><li>判断两个参数是否相等或不等</li><li>实际上, 它们就是 == 和 != 操作符</li><li>当断言失败时, 会打印出参数的值 <ul><li>使用debug格式打印参数</li><li>要求参数实现了PartialEq 和 Debug trait (所有基本类型和标准库里打大部分类型都实现了)</li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add_two</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span><span class="token punctuation">{</span></span>
<span class="line">    a <span class="token operator">+</span> <span class="token number">2</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token attribute attr-name">#[cfg(test)]</span></span>
<span class="line"><span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute attr-name">#[test]</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">it_adds_two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token keyword">super</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>add_two</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="添加自定义的信息" tabindex="-1"><a class="header-anchor" href="#添加自定义的信息"><span>添加自定义的信息</span></a></h3><ul><li>可以向assert!, assert_eq!, assert_ne! 添加可选的自定义信息 <ul><li>这些自定义信息和失败消息都会被打印出来</li><li>assert!: 第1参数必填, 自定义参数为第2个参数</li><li>assert_eq!, assert_ne!: 第1,2参数必填, 自定义参数为第3个参数</li><li>自定义参数会被传递给format! 宏, 可以使用{} 占位符</li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">greeting</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello !&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[cfg(test)]</span></span>
<span class="line"><span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token attribute attr-name">#[test]</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">greeting_contains_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token string">&quot;Carol&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token macro property">assert!</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;Carol&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;Greeting did not contain name, value was \`{}\`&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用should-panic-检查恐慌" tabindex="-1"><a class="header-anchor" href="#使用should-panic-检查恐慌"><span>使用should_panic 检查恐慌</span></a></h2><h3 id="验证错误处理的情况" tabindex="-1"><a class="header-anchor" href="#验证错误处理的情况"><span>验证错误处理的情况</span></a></h3><ul><li>测试除了代码的返回值是否正确, 还需验证代码是否如期的处理了发生错误的情况</li><li>可验证代码在特定情况下是否发生了panic</li><li>should_panic 属性(attribute): <ul><li>函数panic: 测试通过</li><li>函数没有panic: 测试失败</li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">greeting</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello !&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Guess</span> <span class="token punctuation">{</span></span>
<span class="line">    value<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span> <span class="token class-name">Guess</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Guess</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> value <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> value <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Guess value must be between 1 and 100, got {}.&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">Guess</span> <span class="token punctuation">{</span>value<span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token attribute attr-name">#[cfg(test)]</span></span>
<span class="line"><span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token attribute attr-name">#[test]</span></span>
<span class="line">    <span class="token attribute attr-name">#[should_panic]</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">greater_than_100</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Guess</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为Guess::new(200) 会panic, 所以测试通过</p><h3 id="让should-panic-的测试更精确" tabindex="-1"><a class="header-anchor" href="#让should-panic-的测试更精确"><span>让should_panic 的测试更精确</span></a></h3><ul><li>为should_panic 添加可选的expected 参数: <ul><li>将检查失败信息中是否包含所指定的文字</li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"></span>
<span class="line"><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Guess</span> <span class="token punctuation">{</span></span>
<span class="line">    value<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span> <span class="token class-name">Guess</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Guess</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> value <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Guess value must be great or equal to 1 got {}.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            value</span>
<span class="line">            <span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> value <span class="token operator">&gt;</span> <span class="token number">100</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Guess value must be less than or equal to 100 got {}.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            value</span>
<span class="line">            <span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">Guess</span> <span class="token punctuation">{</span>value<span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token attribute attr-name">#[cfg(test)]</span></span>
<span class="line"><span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token attribute attr-name">#[test]</span></span>
<span class="line">    <span class="token attribute attr-name">#[should_panic(expected = <span class="token string">&quot;Guess value must be less than or equal to 100&quot;</span>)]</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">greater_than_100</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Guess</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用result-t-e-的测试" tabindex="-1"><a class="header-anchor" href="#使用result-t-e-的测试"><span>使用Result<code>&lt;T, E&gt;</code> 的测试</span></a></h2><h3 id="在测试的时候使用result-t-e" tabindex="-1"><a class="header-anchor" href="#在测试的时候使用result-t-e"><span>在测试的时候使用Result<code>&lt;T, E&gt;</code></span></a></h3><ul><li>无需panic, 可以使用Result<code>&lt;T, E&gt;</code> 作为返回类型编写测试 <ul><li>返回Ok: 测试通过</li><li>返回Err: 测试失败</li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Guess</span> <span class="token punctuation">{</span></span>
<span class="line">    value<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span> <span class="token class-name">Guess</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Guess</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> value <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Guess value must be great or equal to 1 got {}.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            value</span>
<span class="line">            <span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> value <span class="token operator">&gt;</span> <span class="token number">100</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Guess value must be less than or equal to 100 got {}.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            value</span>
<span class="line">            <span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">Guess</span> <span class="token punctuation">{</span>value<span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token attribute attr-name">#[cfg(test)]</span></span>
<span class="line"><span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute attr-name">#[test]</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">if_works</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token number">2</span><span class="token operator">+</span><span class="token number">3</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;two plus two does not equal to four&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">)</span>    </span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意: 不要使用<code>Result&lt;T,E&gt;</code>编写的测试上标注#[should_panic]</li></ul><h2 id="控制测试运行" tabindex="-1"><a class="header-anchor" href="#控制测试运行"><span>控制测试运行</span></a></h2><h3 id="控制测试如何运行" tabindex="-1"><a class="header-anchor" href="#控制测试如何运行"><span>控制测试如何运行</span></a></h3><ul><li>改变<code>cargo test</code> 命令的行为 <ul><li>并行运行</li><li>所有测试</li><li>捕获(不显示)所有输出, 使读取与测试相关结果的输出更容易</li></ul></li><li>命令行参数: <ul><li>针对cargo test 的参数: 紧跟在<code>cargo test</code> 后面</li><li>针对测试可执行程序的参数: 紧跟在<code>--</code> 后面</li></ul></li><li><code>cargo test --help</code> 查看所有参数</li><li><code>cargo test -- --help</code> 查看测试可用在<code>--</code>之后的参数</li></ul><h3 id="并行运行测试" tabindex="-1"><a class="header-anchor" href="#并行运行测试"><span>并行运行测试</span></a></h3><ul><li>运行多个测试: 默认使用多个线程并行运行 <ul><li>运行快</li></ul></li><li>确保测试之间: <ul><li>不会互相依赖</li><li>不依赖于某个共享状态(如环境变量, 文件系统, 数据库)</li></ul></li></ul><h3 id="test-threads-参数" tabindex="-1"><a class="header-anchor" href="#test-threads-参数"><span>--test-threads 参数</span></a></h3><ul><li>传递给二进制文件</li><li>不想以并行方式运行测试, 或者想对线程数进行颗粒度控制</li><li>可以使用<code>--test-threads</code> 参数, 后面跟线程数量 <ul><li><code>cargo test -- --test-threads=1</code> 一次只运行一个测试</li><li><code>cargo test -- --test-threads=8</code> 一次运行8个测试</li></ul></li></ul><h3 id="显示函数输出" tabindex="-1"><a class="header-anchor" href="#显示函数输出"><span>显示函数输出</span></a></h3><ul><li>默认, 如测试通过, Rust的test 库会捕获所有打印到标准输出的内容</li><li>例如, 如果被测试代码中用到了println!: <ul><li>如果测试通过: 不会在终端看到println! 打印的内容</li><li>如果测试失败: 会在终端看到println! 打印的内容和失败信息</li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">prints_and_return_10</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span><span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;I got the value {}&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token number">10</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[cfg(test)]</span></span>
<span class="line"><span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token attribute attr-name">#[test]</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">this_test_will_pass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token function">prints_and_return_10</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token attribute attr-name">#[test]</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">this_test_will_fall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token function">prints_and_return_10</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="按名称运行测试的子集" tabindex="-1"><a class="header-anchor" href="#按名称运行测试的子集"><span>按名称运行测试的子集</span></a></h2><ul><li>选择运行的测试: 将测试的名称(一个或多个)作为cargo test 的参数</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">add_two</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span><span class="token punctuation">{</span></span>
<span class="line">    a <span class="token operator">+</span> <span class="token number">2</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[cfg(test)]</span></span>
<span class="line"><span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token attribute attr-name">#[test]</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">add_two_and_two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token function">add_two</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token attribute attr-name">#[test]</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">add_three_and_two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token function">add_two</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token attribute attr-name">#[test]</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">one_hundred</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span> <span class="token function">add_two</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>运行单个测试: <code>cargo test one_hundred</code></p></li><li><p>运行多个测试: 指定测试名的一部分(模块名也可以)</p><ul><li><code>cargo test two</code> 会运行两个测试: add_two_and_two, add_three_and_two</li></ul></li></ul><h2 id="忽略测试" tabindex="-1"><a class="header-anchor" href="#忽略测试"><span>忽略测试</span></a></h2><ul><li>ignore 属性(attribute) <code>#[ignore]</code></li><li>运行被忽略的测试: <code>cargo test -- --ignored</code></li></ul><h2 id="测试的组织" tabindex="-1"><a class="header-anchor" href="#测试的组织"><span>测试的组织</span></a></h2><h3 id="测试的分类" tabindex="-1"><a class="header-anchor" href="#测试的分类"><span>测试的分类</span></a></h3><ul><li><p>Rust 对测试的分类:</p><ul><li>单元测试(unit tests)</li><li>集成测试(integration tests)</li></ul></li><li><p>单元测试:</p><ul><li>小, 专注</li><li>一次对一个模块进行隔离的测试</li><li>可测试private 接口</li></ul></li><li><p>集成测试:</p><ul><li>在库外部. 和其他外部代码一起使用</li><li>只能访问public 接口</li></ul></li></ul><h3 id="单元测试" tabindex="-1"><a class="header-anchor" href="#单元测试"><span>单元测试</span></a></h3><h4 id="cfg-test-标注" tabindex="-1"><a class="header-anchor" href="#cfg-test-标注"><span><code>#[cfg(test)]</code>标注</span></a></h4><ul><li>tests 模块上的<code>#[cfg(test)]</code> 标注 <ul><li>只有在运行<code>cargo test</code> 时才编译和运行代码</li><li><code>cargo build</code> 则不会</li></ul></li><li>集成测试在不同的目录, 它不需要<code>#[cfg(test)]</code> 标注</li><li>cfg: configuration(配置) <ul><li>告诉Rust 下面的条目只有在指定的配置选项下才被包含</li><li>配置选项test: 有rust 提供, 用来编译和运行测试 <ul><li>只有cargo test 才会编译代码, 包括某块中的helper函数和<code>#[test]</code> 标注的函数</li></ul></li></ul></li></ul><h4 id="测试私有函数" tabindex="-1"><a class="header-anchor" href="#测试私有函数"><span>测试私有函数</span></a></h4><ul><li>Rust 运行测试私有函数</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add_two</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">-&gt;</span><span class="token keyword">i32</span><span class="token punctuation">{</span></span>
<span class="line">    a<span class="token operator">+</span><span class="token number">2</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">internal_adder</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token keyword">i32</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">-&gt;</span><span class="token keyword">i32</span><span class="token punctuation">{</span></span>
<span class="line">    a<span class="token operator">+</span>b</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[cfg(test)]</span></span>
<span class="line"><span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token attribute attr-name">#[test]</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">internal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token function">internal_adder</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里用<code>use super::*;</code>导入父模块的所有内容,internal 测试函数可以调用internal_adder这个私有函数</p><h3 id="集成测试" tabindex="-1"><a class="header-anchor" href="#集成测试"><span>集成测试</span></a></h3><ul><li>在Rust里, 集成测试完全位于被测试库的外部</li><li>目的: 是测试被测试库的多个部分是否可以一起正常工作</li><li>集成测试的覆盖率很重要</li></ul><h4 id="test-目录" tabindex="-1"><a class="header-anchor" href="#test-目录"><span>test 目录</span></a></h4><ul><li><p>创建集成测试: tests 目录</p></li><li><p>tests 目录下的每个测试文件都是单独一个crate</p><ul><li>需要将被测试库导入</li></ul></li><li><p>无需<code>#[cfg(test)]</code> 标注, tests 目录被特殊对待</p><ul><li>只有运行<code>cargo test</code> 时才会编译和运行tests 目录下的代码</li></ul></li></ul><p>在tests 目录下创建一个文件, 例如<code>tests/integration_test.rs</code>:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> write_and_test<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[test]</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">it_adds_two</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token namespace">write_and_test<span class="token punctuation">::</span></span><span class="token function">add_two</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="运行指定的集成测试" tabindex="-1"><a class="header-anchor" href="#运行指定的集成测试"><span>运行指定的集成测试</span></a></h4><ul><li>运行一个特定的集成测试: cargo test 函数名</li><li>运行某个测试文件内的所有测试: cargo test --test 文件名</li><li>运行所有集成测试: cargo test --test integration_test <ul><li><code>cargo test --test integration_tests</code></li></ul></li></ul><h4 id="集成测试中的子模块" tabindex="-1"><a class="header-anchor" href="#集成测试中的子模块"><span>集成测试中的子模块</span></a></h4><ul><li>tests 目录下每个文件被编译成单独的crate <ul><li>这些文件不共享行为(与src下的文件规则不同)</li></ul></li></ul><h4 id="针对binary-crate的集成测试" tabindex="-1"><a class="header-anchor" href="#针对binary-crate的集成测试"><span>针对binary crate的集成测试</span></a></h4><ul><li><p>如果项目是binary crate, 只含有src/main.rs, 没有src/lib.rs</p><ul><li>无法在tests目录下创建集成测试</li><li>无法把main 函数导入作用域</li></ul></li><li><p>只有binary crate 才能暴露给其他crate用</p></li><li><p>binary crate 意味着独立运行</p></li></ul>`,73)]))}const o=s(p,[["render",l],["__file","Test.html.vue"]]),u=JSON.parse('{"path":"/rust-learning/Test.html","title":"编写自动化测试","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"编写和运行测试","slug":"编写和运行测试","link":"#编写和运行测试","children":[{"level":3,"title":"测试(函数)","slug":"测试-函数","link":"#测试-函数","children":[]},{"level":3,"title":"解剖测试函数","slug":"解剖测试函数","link":"#解剖测试函数","children":[]},{"level":3,"title":"运行测试","slug":"运行测试","link":"#运行测试","children":[]},{"level":3,"title":"测试失败","slug":"测试失败","link":"#测试失败","children":[]}]},{"level":2,"title":"断言(Assert)","slug":"断言-assert","link":"#断言-assert","children":[{"level":3,"title":"使用assert! 宏检查测试结果","slug":"使用assert-宏检查测试结果","link":"#使用assert-宏检查测试结果","children":[]},{"level":3,"title":"使用assert_eq! 和 assert_ne! 测试相等性","slug":"使用assert-eq-和-assert-ne-测试相等性","link":"#使用assert-eq-和-assert-ne-测试相等性","children":[]},{"level":3,"title":"添加自定义的信息","slug":"添加自定义的信息","link":"#添加自定义的信息","children":[]}]},{"level":2,"title":"使用should_panic 检查恐慌","slug":"使用should-panic-检查恐慌","link":"#使用should-panic-检查恐慌","children":[{"level":3,"title":"验证错误处理的情况","slug":"验证错误处理的情况","link":"#验证错误处理的情况","children":[]},{"level":3,"title":"让should_panic 的测试更精确","slug":"让should-panic-的测试更精确","link":"#让should-panic-的测试更精确","children":[]}]},{"level":2,"title":"使用Result<T, E> 的测试","slug":"使用result-t-e-的测试","link":"#使用result-t-e-的测试","children":[{"level":3,"title":"在测试的时候使用Result<T, E>","slug":"在测试的时候使用result-t-e","link":"#在测试的时候使用result-t-e","children":[]}]},{"level":2,"title":"控制测试运行","slug":"控制测试运行","link":"#控制测试运行","children":[{"level":3,"title":"控制测试如何运行","slug":"控制测试如何运行","link":"#控制测试如何运行","children":[]},{"level":3,"title":"并行运行测试","slug":"并行运行测试","link":"#并行运行测试","children":[]},{"level":3,"title":"--test-threads 参数","slug":"test-threads-参数","link":"#test-threads-参数","children":[]},{"level":3,"title":"显示函数输出","slug":"显示函数输出","link":"#显示函数输出","children":[]}]},{"level":2,"title":"按名称运行测试的子集","slug":"按名称运行测试的子集","link":"#按名称运行测试的子集","children":[]},{"level":2,"title":"忽略测试","slug":"忽略测试","link":"#忽略测试","children":[]},{"level":2,"title":"测试的组织","slug":"测试的组织","link":"#测试的组织","children":[{"level":3,"title":"测试的分类","slug":"测试的分类","link":"#测试的分类","children":[]},{"level":3,"title":"单元测试","slug":"单元测试","link":"#单元测试","children":[]},{"level":3,"title":"集成测试","slug":"集成测试","link":"#集成测试","children":[]}]}],"git":{"updatedTime":1731216681000,"contributors":[{"name":"pingzhihe","email":"pzh1760473545@gmail.com","commits":1,"url":"https://github.com/pingzhihe"}]},"filePathRelative":"rust-learning/Test.md"}');export{o as comp,u as data};
