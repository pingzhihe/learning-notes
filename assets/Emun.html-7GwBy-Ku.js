import{_ as s,c as a,a as e,o as p}from"./app-DsOgR8nk.js";const t={};function l(i,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="enum-枚举" tabindex="-1"><a class="header-anchor" href="#enum-枚举"><span>ENUM 枚举</span></a></h1><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token type-definition class-name">ipAddKind</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token constant">V4</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token constant">V6</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义枚举的值:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">let</span> four <span class="token operator">=</span> ipAddKind<span class="token punctuation">::</span><span class="token constant">V4</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> six <span class="token operator">=</span> ipAddKind<span class="token punctuation">::</span><span class="token constant">V6</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="把数据附加到枚举的变体中去" tabindex="-1"><a class="header-anchor" href="#把数据附加到枚举的变体中去"><span>把数据附加到枚举的变体中去</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">IpAddr</span> <span class="token punctuation">{</span></span>
<span class="line">    kind<span class="token punctuation">:</span> ipAddKind<span class="token punctuation">,</span></span>
<span class="line">    address<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建实例:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">let</span> home <span class="token operator">=</span> <span class="token class-name">IpAddr</span> <span class="token punctuation">{</span></span>
<span class="line">    kind<span class="token punctuation">:</span> ipAddKind<span class="token punctuation">::</span><span class="token constant">V4</span><span class="token punctuation">,</span></span>
<span class="line">    address<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以这样化简上面的写法：</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token type-definition class-name">ipAddKind</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token constant">V4</span><span class="token punctuation">(</span><span class="token keyword">u8</span><span class="token punctuation">,</span> <span class="token keyword">u8</span><span class="token punctuation">,</span> <span class="token keyword">u8</span><span class="token punctuation">,</span> <span class="token keyword">u8</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token constant">V6</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就不需要额外使用struct 实例化:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">let</span> home <span class="token operator">=</span> ipAddKind<span class="token punctuation">::</span><span class="token constant">V4</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> loopback <span class="token operator">=</span> ipAddKind<span class="token punctuation">::</span><span class="token constant">V6</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;::1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为枚举添加方法-用impl关键字" tabindex="-1"><a class="header-anchor" href="#为枚举添加方法-用impl关键字"><span>为枚举添加方法,用impl关键字：</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token type-definition class-name">Message</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Quit</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Move</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Write</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">ChangeColor</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">impl</span> <span class="token class-name">Message</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">call</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">let</span> q <span class="token operator">=</span> <span class="token class-name">Message</span><span class="token punctuation">::</span><span class="token class-name">Quit</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token class-name">Message</span><span class="token punctuation">::</span><span class="token class-name">Move</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> w <span class="token operator">=</span> <span class="token class-name">Message</span><span class="token punctuation">::</span><span class="token class-name">Write</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token class-name">Message</span><span class="token punctuation">::</span><span class="token class-name">ChangeColor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">m<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="option-枚举和其在标准库中的使用" tabindex="-1"><a class="header-anchor" href="#option-枚举和其在标准库中的使用"><span>Option 枚举和其在标准库中的使用</span></a></h2><p>描述了某个值可能存在（某种类型）或者不存在的情况<br><strong>Rust 没有 Null</strong> Null的问题在于:当你尝试像使用非空值那样去使用null值时，会出现错误。 Null的概念还是有用的: 因为某种原因而变为无效或缺失的值。这个概念在Rust中被编码为一个叫做<code>Option&lt;T&gt;</code>的枚举。</p><div class="language-Rust line-numbers-mode" data-highlighter="prismjs" data-ext="Rust" data-title="Rust"><pre><code><span class="line">enum Option&lt;T&gt; {</span>
<span class="line">    Some(T),</span>
<span class="line">    None,</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="强大的match控制流运算符" tabindex="-1"><a class="header-anchor" href="#强大的match控制流运算符"><span>强大的match控制流运算符</span></a></h2><p>允许一个值与一系列的模式相比较并根据匹配执行相应代码 模式可以是字面值、变量、通配符、分解结构体、分解枚举、或者范围</p><div class="language-Rust line-numbers-mode" data-highlighter="prismjs" data-ext="Rust" data-title="Rust"><pre><code><span class="line">enum coin {</span>
<span class="line">    Penny,</span>
<span class="line">    Nickel,</span>
<span class="line">    Dime,</span>
<span class="line">    Quarter,</span>
<span class="line">    </span>
<span class="line">}</span>
<span class="line">fn value_in_cents(coin: coin) -&gt; u8 {</span>
<span class="line">    match coin {</span>
<span class="line">        coin::Penny =&gt; {</span>
<span class="line">            println!(&quot;Lucky penny!&quot;);</span>
<span class="line">            1</span>
<span class="line">        },</span>
<span class="line">        coin::Nickel =&gt; 5,</span>
<span class="line">        coin::Dime =&gt; 10,</span>
<span class="line">        coin::Quarter =&gt; 25,</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="match-匹配必须穷举所有可能性" tabindex="-1"><a class="header-anchor" href="#match-匹配必须穷举所有可能性"><span>Match 匹配必须穷举所有可能性</span></a></h3><p>_ 通配符: 替代其余没列出的值 (_要放在最后面)</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token number">0u8</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">match</span> v<span class="token punctuation">{</span></span>
<span class="line">    <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;zero&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    _ <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;other&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="if-let" tabindex="-1"><a class="header-anchor" href="#if-let"><span>if let</span></a></h3><p>处理只关心一个分支的值，而忽略其他分支的情况</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">0u8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">match</span> v<span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    _ <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> v <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是一样的</p>`,33)]))}const o=s(t,[["render",l],["__file","Emun.html.vue"]]),u=JSON.parse('{"path":"/rust-learning/Emun.html","title":"ENUM 枚举","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"把数据附加到枚举的变体中去","slug":"把数据附加到枚举的变体中去","link":"#把数据附加到枚举的变体中去","children":[]},{"level":3,"title":"为枚举添加方法,用impl关键字：","slug":"为枚举添加方法-用impl关键字","link":"#为枚举添加方法-用impl关键字","children":[]},{"level":2,"title":"Option 枚举和其在标准库中的使用","slug":"option-枚举和其在标准库中的使用","link":"#option-枚举和其在标准库中的使用","children":[]},{"level":2,"title":"强大的match控制流运算符","slug":"强大的match控制流运算符","link":"#强大的match控制流运算符","children":[{"level":3,"title":"Match 匹配必须穷举所有可能性","slug":"match-匹配必须穷举所有可能性","link":"#match-匹配必须穷举所有可能性","children":[]},{"level":3,"title":"if let","slug":"if-let","link":"#if-let","children":[]}]}],"git":{"updatedTime":1731216681000,"contributors":[{"name":"pingzhihe","email":"pzh1760473545@gmail.com","commits":2,"url":"https://github.com/pingzhihe"}]},"filePathRelative":"rust-learning/Emun.md"}');export{o as comp,u as data};
