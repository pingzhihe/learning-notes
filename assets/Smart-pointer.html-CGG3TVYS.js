import{_ as s,c as a,a as p,o as e}from"./app-DsOgR8nk.js";const t="/learning-notes/assets/image-1-CxISAVww.png",l="/learning-notes/assets/image-2-ChU6pElb.png",c="/learning-notes/assets/image-3-CZz06bTh.png",o="/learning-notes/assets/image-4-B1ln5Z69.png",i="/learning-notes/assets/image-5-DGlXOEZB.png",u={};function r(k,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="智能指针" tabindex="-1"><a class="header-anchor" href="#智能指针"><span>智能指针</span></a></h1><ul><li>指针: 一个变量在内存中包含的是一个地址(指向其他数据)</li><li>Rust 中最常见的指针就是&quot;引用&quot;</li><li>引用 <ul><li>使用 <code>&amp;</code></li><li>借用它指向的值</li><li>没有其它开销</li><li>最常见的指针类型</li></ul></li></ul><h2 id="智能指针-1" tabindex="-1"><a class="header-anchor" href="#智能指针-1"><span>智能指针</span></a></h2><ul><li>智能指针是这样一些数据结构: <ul><li>行为和指针相似</li><li>有额外的元数据和功能</li></ul></li></ul><h3 id="引用计数-reference-counting-智能指针类型" tabindex="-1"><a class="header-anchor" href="#引用计数-reference-counting-智能指针类型"><span>引用计数(Reference Counting) 智能指针类型</span></a></h3><ul><li>通过记录所有者的数量, 使一份数据被多个所有者同时持有</li><li>并在没有任何所有者时自动清理数据</li></ul><h3 id="引用和智能指针的其他不同" tabindex="-1"><a class="header-anchor" href="#引用和智能指针的其他不同"><span>引用和智能指针的其他不同</span></a></h3><ul><li>引用: 只借用数据</li><li>智能指针: 很多时候都拥有它所指向的数据</li></ul><h3 id="智能指针的例子" tabindex="-1"><a class="header-anchor" href="#智能指针的例子"><span>智能指针的例子</span></a></h3><ul><li><code>String</code> 和 <code>Vec&lt;T&gt;</code></li><li>都拥有一片内存区域, 且允许用户对其操作</li><li>还拥有元数据(例如容量等)</li><li>提供额外的功能或保障(String 保障其数据是合法的 UTF-8 编码)</li></ul><h3 id="智能指针的实现" tabindex="-1"><a class="header-anchor" href="#智能指针的实现"><span>智能指针的实现</span></a></h3><ul><li>智能指针通常使用struct实现, 并且实现了: <ul><li><code>Deref</code> 和 <code>Drop</code> trait</li></ul></li><li>Deref trait: 允许智能指针struct 实例像引用一样被使用</li><li>Drop trait: 允许我们自定义当智能指针实例离开作用域时运行的代码</li></ul><h2 id="本章内容" tabindex="-1"><a class="header-anchor" href="#本章内容"><span>本章内容</span></a></h2><ul><li><p>介绍标准库中常见的智能指针</p><ul><li><code>Box&lt;T&gt;</code>: 在heap内存上分配值</li><li><code>Rc&lt;T&gt;</code>: 启用多重所有权的引用计数类型</li><li><code>Ref&lt;T&gt;</code> 和 <code>RefMut&lt;T&gt;</code>: 通过 <code>RefCell&lt;T&gt;</code> 访问: 在运行时而不是在编译时强制借用规则的类型</li></ul></li><li><p>此外:</p><ul><li>内部可变模式(Interior mutability pattern): 不可变类型暴露出可修改其内部值的API</li><li>引用循环(Reference cycles): 它们如何泄漏内存, 以及如何防止其发生</li></ul></li></ul><h2 id="使用-box-t-来指向heap上的数据" tabindex="-1"><a class="header-anchor" href="#使用-box-t-来指向heap上的数据"><span>使用 <code>Box&lt;T&gt;</code> 来指向heap上的数据</span></a></h2><h3 id="box-t" tabindex="-1"><a class="header-anchor" href="#box-t"><span><code>Box&lt;T&gt;</code></span></a></h3><ul><li><code>Box&lt;T&gt;</code> 是最简单的智能指针: <ul><li><p>允许你在heap上存储数据(而不是stack)</p></li><li><p>stack 上是指向heap上数据的指针</p></li><li><p>没有性能开销</p></li><li><p>没有其它额外功能</p></li><li><p>实现了 <code>Deref</code> trait 和 <code>Drop</code> trait</p></li></ul></li></ul><h3 id="box-t-的常用场景" tabindex="-1"><a class="header-anchor" href="#box-t-的常用场景"><span><code>Box&lt;T&gt;</code> 的常用场景</span></a></h3><ul><li>在编译时, 其类型的大小无法确定。但使用该类型时, 上下文却需要知道它确切大小</li><li>当你有大量数据, 想移交所有权, 但需要确保在操作时数据不会被复制</li><li>使用某个值时, 你只关心它是否实现了特定的trait, 而不关心它的具体类型</li></ul><h3 id="box-t-在heap上存储数据" tabindex="-1"><a class="header-anchor" href="#box-t-在heap上存储数据"><span><code>Box&lt;T&gt;</code> 在heap上存储数据</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;b = {}&quot;</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当离开作用域后,存在stack上的指针和heap上的数据都会被清理</p><h3 id="使用box赋能递归类型" tabindex="-1"><a class="header-anchor" href="#使用box赋能递归类型"><span>使用Box赋能递归类型</span></a></h3><ul><li>在编译时, Rust 需要知道一个类型所占的空间大小</li><li>而递归类型的大小无法在编译的时候被确定</li></ul><img src="`+t+`" alt="Recursing" width="300"><ul><li>Rust 无法确定一个递归类型的大小</li><li>但是Box 类型的大小确定</li><li>在递归类型中使用Box, 就可以解决上述问题</li><li>函数式语言中的Cons List</li></ul><h3 id="关于cons-list" tabindex="-1"><a class="header-anchor" href="#关于cons-list"><span>关于Cons List</span></a></h3><ul><li><p>Cons List 是来自Lisp语言的一种数据结构</p></li><li><p>Cons List 里的每个成员由两个元素组成</p><ul><li>当前项的值</li><li>下一个元素</li></ul></li><li><p>Cons List 里的最后一个元素只包含一个Nil 值, 没有下一个元素</p><ul><li>Nil 表示终止标记</li><li>Null 表示无效或者缺失的值</li></ul></li></ul><h3 id="cons-list-并不是rust的常用集合" tabindex="-1"><a class="header-anchor" href="#cons-list-并不是rust的常用集合"><span>Cons List 并不是Rust的常用集合</span></a></h3><ul><li>Rust 中的<code>Vec&lt;T&gt;</code> 是更常用的集合类型</li><li>构建一个Cons List</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">::</span><span class="token class-name">List</span><span class="token punctuation">::</span><span class="token punctuation">{</span><span class="token class-name">Cons</span><span class="token punctuation">,</span> <span class="token class-name">Nil</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">Nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">enum</span> <span class="token type-definition class-name">List</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Cons</span> <span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Nil</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>报错: <code> recursive type \`List\` has infinite size</code></p><ul><li>Rust 无法计算出存储一个List 所需的空间大小</li><li>不是直接存储数据, 而是存储指向数据的指针, 例如 <code>Box&lt;T&gt;</code></li></ul><h3 id="使用box-t-来获得确定大小的递归类型" tabindex="-1"><a class="header-anchor" href="#使用box-t-来获得确定大小的递归类型"><span>使用<code>Box&lt;T&gt;</code> 来获得确定大小的递归类型</span></a></h3><ul><li><code>Box&lt;T&gt;</code> 是一个指针, Rust 知道它需要多少空间, 因为: <ul><li>存储的是一个地址, 指针的大小不会基于它所指向的数据的大小而改变</li></ul></li></ul><img src="`+l+`" alt="Box&lt;T&gt;" width="250"><ul><li><code>Box&lt;T&gt;</code>: <ul><li>只提供了&quot;间接&quot;存储和heap内存分配的功能</li><li>没有其它额外功能</li><li>没有性能开销</li><li>适用于需要&quot;间接&quot;存储的场景, 例如Cons List</li><li>实现了 <code>Deref</code> trait 和 <code>Drop</code> trait</li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">::</span><span class="token class-name">List</span><span class="token punctuation">::</span><span class="token punctuation">{</span><span class="token class-name">Cons</span><span class="token punctuation">,</span> <span class="token class-name">Nil</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> </span>
<span class="line">            <span class="token class-name">Box</span><span class="token punctuation">::</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token class-name">Box</span><span class="token punctuation">::</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">enum</span> <span class="token type-definition class-name">List</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Cons</span> <span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">List</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Nil</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="deref-trait" tabindex="-1"><a class="header-anchor" href="#deref-trait"><span>Deref Trait</span></a></h2><ul><li>实现了 <code>Deref</code> trait 使我们可以自定义解引用运算符 <code>*</code>的行为</li><li>通过实现 <code>Deref</code>, 智能指针可像常规引用一样来处理</li></ul><h3 id="解引用运算符" tabindex="-1"><a class="header-anchor" href="#解引用运算符"><span>解引用运算符</span></a></h3><ul><li>常规引用是一种指针</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的y就相当于是一个指针, <code>*y</code> 就是取y这个指针指向的值<br> 如果去掉<code>*</code> 我们: <code> assert_eq!(5,*y);</code> 就会报错<code>no implementation for \`{integer} == &amp;{integer}\`</code></p><h3 id="把box-t-当作引用" tabindex="-1"><a class="header-anchor" href="#把box-t-当作引用"><span>把<code>Box&lt;T&gt;</code> 当作引用</span></a></h3><ul><li><code>Box&lt;T&gt;</code> 可以代替上例中的引用</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="定义自己的智能指针" tabindex="-1"><a class="header-anchor" href="#定义自己的智能指针"><span>定义自己的智能指针</span></a></h3><ul><li><code>Box&lt;T&gt;</code> 被定义成拥有一个元素的tuple struct</li><li>(例子) <code>MyBox&lt;T&gt;</code></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">MyBox</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">MyBox</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">MyBox</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">MyBox</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token class-name">MyBox</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这里会报错因为没有实现 <code>Deref</code> trait</p><h3 id="实现-deref-trait" tabindex="-1"><a class="header-anchor" href="#实现-deref-trait"><span>实现 <code>Deref</code> trait</span></a></h3><ul><li>标准库中的 <code>Deref</code> trait 要求我们实现一个 <code>deref</code> 方法 <ul><li>该方法借用 <code>self</code></li><li>返回一个指向内部数据的引用</li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>ops<span class="token punctuation">::</span></span><span class="token class-name">Deref</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">MyBox</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">MyBox</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">MyBox</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">MyBox</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Deref</span> <span class="token keyword">for</span> <span class="token class-name">MyBox</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">type</span> <span class="token type-definition class-name">Target</span> <span class="token operator">=</span> <span class="token class-name">T</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">deref</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span><span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token number">0</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token class-name">MyBox</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数方法的隐式解引用转化-deref-coercion" tabindex="-1"><a class="header-anchor" href="#函数方法的隐式解引用转化-deref-coercion"><span>函数方法的隐式解引用转化(Deref coercion)</span></a></h3><ul><li><p>隐式解引用转化(Deref coercion) 是为函数和方法提供的一种便捷特性</p></li><li><p>假设T实现了 <code>Deref</code> trait:</p><ul><li>Deref Coercion 可以把T的引用转化为T经过Deref操作后生成的引用</li></ul></li><li><p>当把某类型的引用传递给函数或者方法时, 但它的类型与定义的参数类型不匹配:</p><ul><li>Deref Coercion 就会自动发生</li><li>编译器会对deref进行一系列调用, 来把它转化为所需的参数类型 <ul><li>在编译时完成, 没有额外的性能开销</li></ul></li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>ops<span class="token punctuation">::</span></span><span class="token class-name">Deref</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">hello</span><span class="token punctuation">(</span>name <span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;hello,{}&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token class-name">MyBox</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Rust&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// &amp;m &amp; MyBox&lt;String&gt;</span></span>
<span class="line">    <span class="token comment">// deref &amp;String</span></span>
<span class="line">    <span class="token comment">// deref &amp;str</span></span>
<span class="line">    <span class="token function">hello</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// equals to </span></span>
<span class="line">    <span class="token function">hello</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">MyBox</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">MyBox</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">MyBox</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">MyBox</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Deref</span> <span class="token keyword">for</span> <span class="token class-name">MyBox</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">type</span> <span class="token type-definition class-name">Target</span> <span class="token operator">=</span> <span class="token class-name">T</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">deref</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span><span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token number">0</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解引用与可变性" tabindex="-1"><a class="header-anchor" href="#解引用与可变性"><span>解引用与可变性</span></a></h3><ul><li>可使用<code>DerefMut</code> trait 来重载可变引用的*运算符 <ul><li>当<code>T: Deref&lt;Target=U&gt;</code> 允许&amp;T转换为&amp;U</li><li>当<code>T: DerefMut&lt;Target=U&gt;</code> 允许&amp;mut T转换为&amp;mut U</li><li>当<code>T: Deref&lt;Target=U&gt;</code> 允许&amp;mut T转换为&amp;U</li></ul></li></ul><h2 id="drop-trait" tabindex="-1"><a class="header-anchor" href="#drop-trait"><span><code>Drop</code> trait</span></a></h2><ul><li><p>实现了 <code>Drop</code> trait 可以让我们自定义当一个值离开作用域时发生的动作</p><ul><li>例如: 文件, 网络资源释放等</li><li>任何类型都可以实现 <code>Drop</code> trait</li></ul></li><li><p><code>Drop</code> trait 只要求你实现 <code>drop</code> 方法</p><ul><li>参数: 对self的可变引用</li></ul></li><li><p><code>Drop</code> trait 在预导入模块里(Prelude)</p></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">CustomSmartPointer</span><span class="token punctuation">{</span></span>
<span class="line">    data<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span> <span class="token class-name">Drop</span> <span class="token keyword">for</span> <span class="token class-name">CustomSmartPointer</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">drop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Dropping CustomSmartPointer with data\`{}\`!&quot;</span><span class="token punctuation">,</span><span class="token keyword">self</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token class-name">CustomSmartPointer</span><span class="token punctuation">{</span>data<span class="token punctuation">:</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;my stuff&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token class-name">CustomSmartPointer</span><span class="token punctuation">{</span>data<span class="token punctuation">:</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;other stuff&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;CustomSmartPointer created&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用std-mem-drop-来提前drop值" tabindex="-1"><a class="header-anchor" href="#使用std-mem-drop-来提前drop值"><span>使用std::mem::drop 来提前drop值</span></a></h3><ul><li>很难直接禁用自动的drop功能, 也没必要 <ul><li>Drop trait 的目的主要是进行自动地释放处理逻辑</li></ul></li><li>Rust 不允许手动调用Drop trait 的drop方法</li><li>但是可以调用标准库的 <code>std::mem::drop</code> 函数来提前释放值</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token class-name">CustomSmartPointer</span><span class="token punctuation">{</span>data<span class="token punctuation">:</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;my stuff&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">drop</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token class-name">CustomSmartPointer</span><span class="token punctuation">{</span>data<span class="token punctuation">:</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;other stuff&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;CustomSmartPointer created&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rc-t-引用计数智能指针" tabindex="-1"><a class="header-anchor" href="#rc-t-引用计数智能指针"><span><code>Rc&lt;T&gt;</code> 引用计数智能指针</span></a></h2><ul><li><p>有时, 一个值会有多个所有者</p><img src="`+c+'" alt="multi-owner" width="250"></li><li><p>为了支持多重所有权: <code>Rc&lt;T&gt;</code></p><ul><li>reference counting (引用计数)</li><li>可以追踪所有到值的引用</li><li>0个引用, 该值可以被清理</li></ul></li></ul><h3 id="rc-t-的使用场景" tabindex="-1"><a class="header-anchor" href="#rc-t-的使用场景"><span><code>Rc&lt;T&gt;</code> 的使用场景</span></a></h3><ul><li>需要在heap上分配数据, 这些数据被程序的多个部分读取(只读), 但在编译时无法确定哪个部分最后使用完这些数据</li><li><code>Rc&lt;T&gt;</code> 只能用于单线程场景</li></ul><h3 id="rc-t-的例子" tabindex="-1"><a class="header-anchor" href="#rc-t-的例子"><span><code>Rc&lt;T&gt;</code> 的例子</span></a></h3><ul><li><p><code>Rc&lt;T&gt;</code> 不在预导入模块(preludez) 中</p></li><li><p>Rc::clone(&amp;a)函数: 会增加引用计数</p></li><li><p>Rc::strong_count(&amp;a)函数: 获得强引用计数</p><ul><li>Rc::weak_count(&amp;a)函数: 获得弱引用计数</li></ul></li><li><p>两个List共享另一个List的所有权</p><img src="'+o+`" alt="multi-owner" width="250"></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token type-definition class-name">List</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">List</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">::</span><span class="token class-name">List</span><span class="token punctuation">::</span><span class="token punctuation">{</span><span class="token class-name">Cons</span><span class="token punctuation">,</span> <span class="token class-name">Nil</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>rc<span class="token punctuation">::</span></span><span class="token class-name">Rc</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rc-clone-vs-clone-方法" tabindex="-1"><a class="header-anchor" href="#rc-clone-vs-clone-方法"><span>Rc::clone vs clone() 方法</span></a></h3><ul><li>Rc::clone(): 增加引用, 不会执行数据的深拷贝操作</li><li>类型的clone() 方法: 很多会执行数据的深拷贝操作</li></ul><h3 id="rc-t" tabindex="-1"><a class="header-anchor" href="#rc-t"><span><code>Rc&lt;T&gt;</code></span></a></h3><ul><li><code>Rc&lt;T&gt;</code> 通过不可变引用, 使你可以在程序的不同部分之间共享只读数据</li></ul><h2 id="refcell-t-和内部可变性-interior-mutability" tabindex="-1"><a class="header-anchor" href="#refcell-t-和内部可变性-interior-mutability"><span><code>RefCell&lt;T&gt;</code> 和内部可变性(Interior mutability)</span></a></h2><ul><li>内部可变性是Rust的设计模式之一</li><li>它允许你在只持有不可变引用的情况下对数据进行修改 <ul><li>数据结构中使用了unsafe代码来绕过Rust正常的可变性和借用规则</li></ul></li></ul><h3 id="refcell-t" tabindex="-1"><a class="header-anchor" href="#refcell-t"><span><code>RefCell&lt;T&gt;</code></span></a></h3><ul><li>与 <code>Rc&lt;T&gt;</code> 不同, <code>RefCell&lt;T&gt;</code> 类型代表了其持有数据的唯一所有权</li></ul><h4 id="复习借用规则" tabindex="-1"><a class="header-anchor" href="#复习借用规则"><span>复习借用规则：</span></a></h4><ul><li>在任何给定的时间里, 你要么只能拥有一个可变引用, 要么只能任意数量的不可变引用</li><li>引用总司有效的</li></ul><h3 id="refcell-t-与box-t-的区别" tabindex="-1"><a class="header-anchor" href="#refcell-t-与box-t-的区别"><span><code>RefCell&lt;T&gt;</code> 与<code>Box&lt;T&gt;</code> 的区别</span></a></h3><ul><li><code>Box&lt;T&gt;</code><ul><li>编译阶段强制代码遵守借用规则</li><li>否则出现错误</li></ul></li><li><code>RefCell&lt;T&gt;</code><ul><li>只会在运行时检查借用规则</li><li>否则触发panic</li></ul></li></ul><h3 id="借用规则在不同阶段检查的比较" tabindex="-1"><a class="header-anchor" href="#借用规则在不同阶段检查的比较"><span>借用规则在不同阶段检查的比较</span></a></h3><ul><li><p>编译阶段:</p><ul><li>尽早暴露问题</li><li>没有任何运行时开销</li><li>对大多数场景是最佳选择</li><li>是Rust的默认行为</li></ul></li><li><p>运行时:</p><ul><li>问题暴露延后, 甚至到生产环境</li><li>因借用计数产生些许性能损失</li><li>实现某些特定的内存安全场景(不可变环境中修改自身数据)</li></ul></li></ul><h3 id="refcell-t-1" tabindex="-1"><a class="header-anchor" href="#refcell-t-1"><span><code>RefCell&lt;T&gt;</code></span></a></h3><ul><li>与 <code>Rc&lt;T&gt;</code> 类似, 只能用于单线程场景</li></ul><h3 id="选择-box-t-rc-t-refcell-t-的依据" tabindex="-1"><a class="header-anchor" href="#选择-box-t-rc-t-refcell-t-的依据"><span>选择 <code>Box&lt;T&gt;</code> <code>Rc&lt;T&gt;</code> <code>RefCell&lt;T&gt;</code>的依据</span></a></h3><img src="`+i+`" alt="comparison" width="500"><h3 id="内部可变性-可变的借用一个不可变的值" tabindex="-1"><a class="header-anchor" href="#内部可变性-可变的借用一个不可变的值"><span>内部可变性: 可变的借用一个不可变的值</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">Messenger</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">send</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> msg<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">LimitTracker</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token lifetime-annotation symbol">&#39;a</span> <span class="token operator">+</span> <span class="token class-name">Messenger</span><span class="token operator">&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    messenger<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token class-name">T</span><span class="token punctuation">,</span></span>
<span class="line">    value<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span></span>
<span class="line">    max<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span> <span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">LimitTracker</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">where</span></span>
<span class="line">    <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Messenger</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span> <span class="token punctuation">(</span>messenger<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">,</span> max<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">LimitTracker</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">LimitTracker</span> <span class="token punctuation">{</span></span>
<span class="line">            messenger<span class="token punctuation">,</span></span>
<span class="line">            value<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">            max<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">set_value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">let</span> percentage_of_max <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>value <span class="token keyword">as</span> <span class="token keyword">f64</span> <span class="token operator">/</span> <span class="token keyword">self</span><span class="token punctuation">.</span>max <span class="token keyword">as</span> <span class="token keyword">f64</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> percentage_of_max <span class="token operator">&gt;=</span> <span class="token number">1.0</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token punctuation">.</span>messenger<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;Error: you are over your quota!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> percentage_of_max <span class="token operator">&gt;=</span> <span class="token number">0.9</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token punctuation">.</span>messenger</span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;Uegent warning: you&#39;ve used up over 90% of your quota!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> percentage_of_max <span class="token operator">&gt;=</span> <span class="token number">0.75</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token punctuation">.</span>messenger</span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;Warning: You&#39;ve used up over 75% of your quota!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[cfg(test)]</span></span>
<span class="line"><span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>cell<span class="token punctuation">::</span></span><span class="token class-name">RefCell</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token type-definition class-name">MockMessenger</span> <span class="token punctuation">{</span></span>
<span class="line">        sent_messages<span class="token punctuation">:</span> <span class="token class-name">RefCell</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">impl</span> <span class="token class-name">MockMessenger</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">MockMessenger</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">MockMessenger</span><span class="token punctuation">{</span></span>
<span class="line">                sent_messages<span class="token punctuation">:</span> <span class="token class-name">RefCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">impl</span> <span class="token class-name">Messenger</span> <span class="token keyword">for</span> <span class="token class-name">MockMessenger</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">fn</span> <span class="token function-definition function">send</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token punctuation">.</span>sent_messages<span class="token punctuation">.</span><span class="token function">borrow_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token attribute attr-name">#[test]</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">it_sends_an_over_75_percent_warning_message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> mock_messenger <span class="token operator">=</span> <span class="token class-name">MockMessenger</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">let</span> <span class="token keyword">mut</span> limit_tracker <span class="token operator">=</span> <span class="token class-name">LimitTracker</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mock_messenger<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        limit_tracker<span class="token punctuation">.</span><span class="token function">set_value</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mock_messenger<span class="token punctuation">.</span>sent_messages<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用refcell-t-在运行时记录借用信息" tabindex="-1"><a class="header-anchor" href="#使用refcell-t-在运行时记录借用信息"><span>使用<code>RefCell&lt;T&gt;</code> 在运行时记录借用信息</span></a></h3><ul><li><p>两个方法(安全接口):</p><ul><li>borrow方法: <ul><li>返回智能指针<code>Ref&lt;T&gt;</code>, 它实现了<code>Deref</code> trait</li></ul></li><li>borrow_mut方法: <ul><li>返回智能指针<code>RefMut&lt;T&gt;</code>, 它实现了<code>Deref</code> trait</li></ul></li></ul></li><li><p><code>RefCell&lt;T&gt;</code> 会记录当前存在多少个活跃的<code>Ref&lt;T&gt;</code> 和 <code>RefMut&lt;T&gt;</code> 智能指针</p><ul><li>每次调用borrow: 不可变借用计数加一</li><li>任何一个<code>Ref&lt;T&gt;</code>的值离开作用域被释放时, 不可变借用计数减一</li><li>每次调用borrow_mut: 可变借用计数加一</li><li>任何一个<code>RefMut&lt;T&gt;</code>的值离开作用域被释放时, 可变借用计数减一</li></ul></li><li><p>Rust以此技术来维护借用检查规则:</p><ul><li>任何一个给定时间里, 只允许拥有有多个不可变借用或一个可变借用</li></ul></li></ul><h3 id="使用-rc-t-和-refcell-t-来实现一个拥有多重所有权的可变数据" tabindex="-1"><a class="header-anchor" href="#使用-rc-t-和-refcell-t-来实现一个拥有多重所有权的可变数据"><span>使用 <code>Rc&lt;T&gt;</code> 和 <code>RefCell&lt;T&gt;</code> 来实现一个拥有多重所有权的可变数据</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token attribute attr-name">#[derive(Debug)]</span></span>
<span class="line"><span class="token keyword">enum</span> <span class="token type-definition class-name">List</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">RefCell</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">List</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">::</span><span class="token class-name">List</span><span class="token punctuation">::</span><span class="token punctuation">{</span><span class="token class-name">Cons</span><span class="token punctuation">,</span> <span class="token class-name">Nil</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">rc<span class="token punctuation">::</span></span><span class="token class-name">Rc</span><span class="token punctuation">,</span> <span class="token namespace">cell<span class="token punctuation">::</span></span><span class="token class-name">RefCell</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">RefCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">RefCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">RefCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token operator">*</span>value<span class="token punctuation">.</span><span class="token function">borrow_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;a after = {:?}&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;b after = {:?}&quot;</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;c after = {:?}&quot;</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其它可实现内部可变性的类型" tabindex="-1"><a class="header-anchor" href="#其它可实现内部可变性的类型"><span>其它可实现内部可变性的类型</span></a></h3><ul><li><code>Cell&lt;T&gt;</code>: 通过复制来访问数据</li><li><code>Mutex&lt;T&gt;</code>: 用于实现跨线程情形下的内部可变性模式</li></ul>`,98)]))}const m=s(u,[["render",r],["__file","Smart-pointer.html.vue"]]),v=JSON.parse('{"path":"/rust-learning/Smart-pointer.html","title":"智能指针","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"智能指针","slug":"智能指针-1","link":"#智能指针-1","children":[{"level":3,"title":"引用计数(Reference Counting) 智能指针类型","slug":"引用计数-reference-counting-智能指针类型","link":"#引用计数-reference-counting-智能指针类型","children":[]},{"level":3,"title":"引用和智能指针的其他不同","slug":"引用和智能指针的其他不同","link":"#引用和智能指针的其他不同","children":[]},{"level":3,"title":"智能指针的例子","slug":"智能指针的例子","link":"#智能指针的例子","children":[]},{"level":3,"title":"智能指针的实现","slug":"智能指针的实现","link":"#智能指针的实现","children":[]}]},{"level":2,"title":"本章内容","slug":"本章内容","link":"#本章内容","children":[]},{"level":2,"title":"使用 Box<T> 来指向heap上的数据","slug":"使用-box-t-来指向heap上的数据","link":"#使用-box-t-来指向heap上的数据","children":[{"level":3,"title":"Box<T>","slug":"box-t","link":"#box-t","children":[]},{"level":3,"title":"Box<T> 的常用场景","slug":"box-t-的常用场景","link":"#box-t-的常用场景","children":[]},{"level":3,"title":"Box<T> 在heap上存储数据","slug":"box-t-在heap上存储数据","link":"#box-t-在heap上存储数据","children":[]},{"level":3,"title":"使用Box赋能递归类型","slug":"使用box赋能递归类型","link":"#使用box赋能递归类型","children":[]},{"level":3,"title":"关于Cons List","slug":"关于cons-list","link":"#关于cons-list","children":[]},{"level":3,"title":"Cons List 并不是Rust的常用集合","slug":"cons-list-并不是rust的常用集合","link":"#cons-list-并不是rust的常用集合","children":[]},{"level":3,"title":"使用Box<T> 来获得确定大小的递归类型","slug":"使用box-t-来获得确定大小的递归类型","link":"#使用box-t-来获得确定大小的递归类型","children":[]}]},{"level":2,"title":"Deref Trait","slug":"deref-trait","link":"#deref-trait","children":[{"level":3,"title":"解引用运算符","slug":"解引用运算符","link":"#解引用运算符","children":[]},{"level":3,"title":"把Box<T>  当作引用","slug":"把box-t-当作引用","link":"#把box-t-当作引用","children":[]},{"level":3,"title":"定义自己的智能指针","slug":"定义自己的智能指针","link":"#定义自己的智能指针","children":[]},{"level":3,"title":"实现 Deref trait","slug":"实现-deref-trait","link":"#实现-deref-trait","children":[]},{"level":3,"title":"函数方法的隐式解引用转化(Deref coercion)","slug":"函数方法的隐式解引用转化-deref-coercion","link":"#函数方法的隐式解引用转化-deref-coercion","children":[]},{"level":3,"title":"解引用与可变性","slug":"解引用与可变性","link":"#解引用与可变性","children":[]}]},{"level":2,"title":"Drop trait","slug":"drop-trait","link":"#drop-trait","children":[{"level":3,"title":"使用std::mem::drop 来提前drop值","slug":"使用std-mem-drop-来提前drop值","link":"#使用std-mem-drop-来提前drop值","children":[]}]},{"level":2,"title":"Rc<T> 引用计数智能指针","slug":"rc-t-引用计数智能指针","link":"#rc-t-引用计数智能指针","children":[{"level":3,"title":"Rc<T> 的使用场景","slug":"rc-t-的使用场景","link":"#rc-t-的使用场景","children":[]},{"level":3,"title":"Rc<T> 的例子","slug":"rc-t-的例子","link":"#rc-t-的例子","children":[]},{"level":3,"title":"Rc::clone vs clone() 方法","slug":"rc-clone-vs-clone-方法","link":"#rc-clone-vs-clone-方法","children":[]},{"level":3,"title":"Rc<T>","slug":"rc-t","link":"#rc-t","children":[]}]},{"level":2,"title":"RefCell<T> 和内部可变性(Interior mutability)","slug":"refcell-t-和内部可变性-interior-mutability","link":"#refcell-t-和内部可变性-interior-mutability","children":[{"level":3,"title":"RefCell<T>","slug":"refcell-t","link":"#refcell-t","children":[]},{"level":3,"title":"RefCell<T> 与Box<T> 的区别","slug":"refcell-t-与box-t-的区别","link":"#refcell-t-与box-t-的区别","children":[]},{"level":3,"title":"借用规则在不同阶段检查的比较","slug":"借用规则在不同阶段检查的比较","link":"#借用规则在不同阶段检查的比较","children":[]},{"level":3,"title":"RefCell<T>","slug":"refcell-t-1","link":"#refcell-t-1","children":[]},{"level":3,"title":"选择 Box<T> Rc<T> RefCell<T>的依据","slug":"选择-box-t-rc-t-refcell-t-的依据","link":"#选择-box-t-rc-t-refcell-t-的依据","children":[]},{"level":3,"title":"内部可变性: 可变的借用一个不可变的值","slug":"内部可变性-可变的借用一个不可变的值","link":"#内部可变性-可变的借用一个不可变的值","children":[]},{"level":3,"title":"使用RefCell<T> 在运行时记录借用信息","slug":"使用refcell-t-在运行时记录借用信息","link":"#使用refcell-t-在运行时记录借用信息","children":[]},{"level":3,"title":"使用 Rc<T> 和 RefCell<T> 来实现一个拥有多重所有权的可变数据","slug":"使用-rc-t-和-refcell-t-来实现一个拥有多重所有权的可变数据","link":"#使用-rc-t-和-refcell-t-来实现一个拥有多重所有权的可变数据","children":[]},{"level":3,"title":"其它可实现内部可变性的类型","slug":"其它可实现内部可变性的类型","link":"#其它可实现内部可变性的类型","children":[]}]}],"git":{"updatedTime":1731474374000,"contributors":[{"name":"pingzhihe","email":"pzh1760473545@gmail.com","commits":1,"url":"https://github.com/pingzhihe"}]},"filePathRelative":"rust-learning/Smart-pointer.md"}');export{m as comp,v as data};
