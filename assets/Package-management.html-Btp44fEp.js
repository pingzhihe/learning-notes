import{_ as s,c as a,a as e,o as l}from"./app-DsOgR8nk.js";const t="/learning-notes/assets/struct-1-Df63hFLT.png",p={};function i(c,n){return l(),a("div",null,n[0]||(n[0]=[e(`<h1 id="rust-的代码组织" tabindex="-1"><a class="header-anchor" href="#rust-的代码组织"><span>Rust 的代码组织</span></a></h1><ul><li><p>代码组织主要包括：</p><ul><li>哪些细节可以暴露， 哪些细节是私有的</li><li>作用域内哪些名称有效</li></ul></li><li><p>模块系统:</p><ul><li>Package(包): Cargo 的特性, 让你构建, 测试, 共享crate</li><li>Crate (单元包): 一个模块树, 它可以产生一个library或可执行文件</li><li>Module (模块) 和 use: 让你控制作用域和路径的私有性</li><li>Path (路径): 一个命名项的方式, 例如: struct, function, module</li></ul></li></ul><h2 id="package-和-crate" tabindex="-1"><a class="header-anchor" href="#package-和-crate"><span>Package 和 Crate</span></a></h2><ul><li>Crate 的类型: <ul><li>binary: 一个可执行文件</li><li>library: 一个库</li></ul></li><li>Crate Root: <ul><li>是源代码文件</li><li>Rust 编译器从这里开始, 组成你的Crate 的根moudle</li></ul></li><li>一个Package: <ul><li>包含一个 Cargo.toml 文件, 它描述了如何构建这些 Crates</li><li>只能包含0-1个library crate</li><li>可以包含任意数量的 binary crate</li><li>但必须至少包含一个crate (无论是library还是binary)</li></ul></li></ul><h3 id="cargo-惯例" tabindex="-1"><a class="header-anchor" href="#cargo-惯例"><span>Cargo 惯例:</span></a></h3><ul><li><p>src/main.rs :</p><ul><li>是 binary crate 的 crate root</li><li>crate 名与package名相同</li></ul></li><li><p>src/lib.rs:</p><ul><li>package 包含一个library crate</li><li>library crate 的 crate root</li><li>crate 名与package名相同</li></ul></li><li><p>Cargo 把crate root 文件交给rustc 来构建library 或binary</p></li><li><p>一个Package 可以有多个 binary crate:</p><ul><li>文件放在src/bin 目录下</li><li>每个文件是单独的binary crate</li></ul></li></ul><h3 id="crate-的作用" tabindex="-1"><a class="header-anchor" href="#crate-的作用"><span>Crate 的作用</span></a></h3><ul><li>将相关功能组合到一个作用域内, 便于在项目之间共享 <ul><li>防止冲突</li></ul></li><li>例如 rand crate, 访问它的功能需要通过它的名字: rand</li></ul><h3 id="定义moudle-来控制作用域和实用性" tabindex="-1"><a class="header-anchor" href="#定义moudle-来控制作用域和实用性"><span>定义moudle 来控制作用域和实用性</span></a></h3><ul><li>Moudle <ul><li>在一个crate内, 将代码进行分组</li><li>增加可读性, 易于复用</li><li>控制项目(item) 的私有性。 public/private</li></ul></li><li>建立module: <ul><li>mod 关键字</li><li>可嵌套</li><li>可包含其他项(struct, enum, 常量, trait, 函数等)的定义</li><li>默认是私有的 可加<code>pub</code>关键字使其公有<br> 在src/lib.rs 中定义一个模块:</li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">mod</span> <span class="token module-declaration namespace">front_of_house</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// path: src/lib.rs</span></span>
<span class="line">    <span class="token comment">// 子moudle</span></span>
<span class="line">    <span class="token keyword">mod</span> <span class="token module-declaration namespace">hosting</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 子moudle</span></span>
<span class="line">    <span class="token keyword">mod</span> <span class="token module-declaration namespace">serving</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">take_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">serve_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">take_payment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结构:</p><img src="`+t+`" alt="mod-struct" width="400"><ul><li>src/main.rs 和 src/lib.rs 叫做crate roots: <ul><li>这两个文件(任意一个)的内容形成了名为crate的模块, 位于整个模块树的根部</li></ul></li></ul><h2 id="路径-path" tabindex="-1"><a class="header-anchor" href="#路径-path"><span>路径 (Path)</span></a></h2><ul><li>为了在rust的模块中找到某个条目,需要使用路径</li><li>路径的两种形式: <ul><li>绝对路径: 从crate root 开始, 使用crate名或者字面值<code>crate</code></li><li>相对路径: 从当前模块开始, 使用<code>self</code>, <code>super</code> 或当前模块的标识符</li></ul></li><li>路径至少由一个标识符组成,标识符之间使用<code>::</code></li><li>例如: <code>crate::front_of_house::hosting::add_to_waitlist</code></li></ul><h3 id="私有边界-private-boundary" tabindex="-1"><a class="header-anchor" href="#私有边界-private-boundary"><span>私有边界(private boundary)</span></a></h3><ul><li>模块不仅可以组织代码, 还可以定义私有边界</li><li>如果把函数或者struct 等设为私有,可以将它放到某个模块中, 这样其他模块就不能访问它了</li><li>Rust 中所有的条目(函数,方法,struct,enum,module) 默认都是私有的</li><li>父级模块不能访问子模块的私有条目</li><li>子模块可以访问父模块的私有条目</li><li>使用<code>pub</code>关键字可以使条目变为公有</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">mod</span> <span class="token module-declaration namespace">front_of_house</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">pub</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">hosting</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">eat_at_restaurant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Absolute path</span></span>
<span class="line">    <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>front_of_house<span class="token punctuation">::</span>hosting<span class="token punctuation">::</span></span><span class="token function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Relative path</span></span>
<span class="line">    <span class="token namespace">front_of_house<span class="token punctuation">::</span>hosting<span class="token punctuation">::</span></span><span class="token function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="super-关键字" tabindex="-1"><a class="header-anchor" href="#super-关键字"><span>super 关键字:</span></a></h3><ul><li>super: 用来访问父级模块路径中的内容, 类似文件系统中的<code>..</code></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">serve_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">mod</span> <span class="token module-declaration namespace">back_of_house</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">fix_incorrect_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">cook_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>serve_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">cook_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pub-struct" tabindex="-1"><a class="header-anchor" href="#pub-struct"><span>pub struct</span></a></h3><ul><li><p>pub struct: 使结构体公有</p><ul><li>struct 是公共的</li><li>struct 内字段是默认私有的</li></ul></li><li><p>struct 的字段需要单独设置pub 来变成公有</p></li></ul><h3 id="pub-enum" tabindex="-1"><a class="header-anchor" href="#pub-enum"><span>pub enum</span></a></h3><ul><li>pub enum: <ul><li>enum 是公共的</li><li>enum 的变体也都是公共的</li></ul></li></ul><h2 id="use-关键字" tabindex="-1"><a class="header-anchor" href="#use-关键字"><span>use 关键字</span></a></h2><ul><li>可以使用use 关键字将路径引入作用域内 <ul><li>仍遵循私有性规则</li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">mod</span> <span class="token module-declaration namespace">front_of_house</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">pub</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">hosting</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>front_of_house<span class="token punctuation">::</span></span>hosting<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">eat_at_restaurant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token namespace">hosting<span class="token punctuation">::</span></span><span class="token function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token namespace">hosting<span class="token punctuation">::</span></span><span class="token function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token namespace">hosting<span class="token punctuation">::</span></span><span class="token function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>use 也可以使用相对路径</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">front_of_house<span class="token punctuation">::</span></span>hosting<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们一般引入的是函数的父级模块, 这样就可以知道调用的函数是属于哪个模块的</p><ul><li>struct, enum, 其他: 指定完整路径(指定到本身)</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> map <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同名的struct或者enum, 指定到父级</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>fmt<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">Result</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Result</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="as-关键字" tabindex="-1"><a class="header-anchor" href="#as-关键字"><span>as 关键字</span></a></h3><ul><li>as 关键字可以为引入的路径设置本地的别名</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span> <span class="token keyword">as</span> <span class="token class-name">IoResult</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">IoResult</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用pub-use-重新导出名称" tabindex="-1"><a class="header-anchor" href="#使用pub-use-重新导出名称"><span>使用pub use 重新导出名称</span></a></h3><ul><li>使用use 将路径(名称)导入作用域后, 该名称在次作用域是私有的</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">pub</span> <span class="token keyword">use</span> <span class="token namespace">front_of_house<span class="token punctuation">::</span></span>hosting<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在外部使用hosting function</p><ul><li>pub use: 重导出 <ul><li>将条目引入作用域</li><li>该条目可以被外部代码引入到它们的作用域</li></ul></li></ul><h3 id="使用外部包" tabindex="-1"><a class="header-anchor" href="#使用外部包"><span>使用外部包</span></a></h3><ol><li>在Cargo.toml 中添加依赖的包(package) <ul><li>https://crates.io/ 上查找包</li></ul></li><li>use 将特定条目引入作用域 <ul><li>例如: use rand::Rng</li></ul></li></ol><ul><li>标准库std 也被当作一个外部包 <ul><li>不需要修改Cargo.toml来使用它</li><li>只需要use 将特定条目引入作用域</li></ul></li></ul><h3 id="使用嵌套路径消除大量的use" tabindex="-1"><a class="header-anchor" href="#使用嵌套路径消除大量的use"><span>使用嵌套路径消除大量的use</span></a></h3><ul><li>如果要使用一个包或者模块中的多个条目</li><li>可以使用嵌套路径在同一行内将上述条目引入: <ul><li>路径相同的部分::{路径不同的部分}</li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">cmp<span class="token punctuation">::</span></span><span class="token class-name">Ordering</span><span class="token punctuation">,</span> io<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>也可以使用self, super</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token class-name">Write</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="通配符" tabindex="-1"><a class="header-anchor" href="#通配符"><span>通配符*</span></a></h3><ul><li>使用*可以把路径中所有的公共条目引入作用域</li><li>注意: 谨慎使用</li><li>应用场景: <ul><li>测试: 把所有被测试的代码引入到tests模块</li><li>有时候被用于预导入(prelude)模块</li></ul></li></ul><h2 id="将模块拆分为不同的文件" tabindex="-1"><a class="header-anchor" href="#将模块拆分为不同的文件"><span>将模块拆分为不同的文件</span></a></h2><h3 id="将模块内容移动到其他文件" tabindex="-1"><a class="header-anchor" href="#将模块内容移动到其他文件"><span>将模块内容移动到其他文件</span></a></h3><ul><li>模块定义时, 如果模块名后边是<code>;</code>, 而不是代码块: <ul><li>Rust 会从与模块同名的文件中加载模块内容</li><li>模块树的结构不会发生变化</li><li>例如: <code>mod front_of_house;</code></li></ul></li><li>随着模块逐渐增大, 可以将模块内容移动到其他文件中</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">mod</span> <span class="token module-declaration namespace">front_of_house</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">pub</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">hosting</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这边如果是<code>mod front_of_house;</code> 会从front_of_house.rs 文件中加载模块内容<br><code>lib.rs</code>:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">mod</span> <span class="token module-declaration namespace">front_of_house</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">pub</span> <span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span> front_of_house<span class="token punctuation">::</span></span>hosting<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">eat_at_restaurant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token namespace">hosting <span class="token punctuation">::</span></span> <span class="token function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token namespace">hosting <span class="token punctuation">::</span></span> <span class="token function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token namespace">hosting <span class="token punctuation">::</span></span> <span class="token function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>front_of_house.rs</code>:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">pub</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">hosting</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,62)]))}const u=s(p,[["render",i],["__file","Package-management.html.vue"]]),r=JSON.parse('{"path":"/rust-learning/Package-management.html","title":"Rust 的代码组织","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Package 和 Crate","slug":"package-和-crate","link":"#package-和-crate","children":[{"level":3,"title":"Cargo 惯例:","slug":"cargo-惯例","link":"#cargo-惯例","children":[]},{"level":3,"title":"Crate 的作用","slug":"crate-的作用","link":"#crate-的作用","children":[]},{"level":3,"title":"定义moudle 来控制作用域和实用性","slug":"定义moudle-来控制作用域和实用性","link":"#定义moudle-来控制作用域和实用性","children":[]}]},{"level":2,"title":"路径 (Path)","slug":"路径-path","link":"#路径-path","children":[{"level":3,"title":"私有边界(private boundary)","slug":"私有边界-private-boundary","link":"#私有边界-private-boundary","children":[]},{"level":3,"title":"super 关键字:","slug":"super-关键字","link":"#super-关键字","children":[]},{"level":3,"title":"pub struct","slug":"pub-struct","link":"#pub-struct","children":[]},{"level":3,"title":"pub enum","slug":"pub-enum","link":"#pub-enum","children":[]}]},{"level":2,"title":"use 关键字","slug":"use-关键字","link":"#use-关键字","children":[{"level":3,"title":"as 关键字","slug":"as-关键字","link":"#as-关键字","children":[]},{"level":3,"title":"使用pub use 重新导出名称","slug":"使用pub-use-重新导出名称","link":"#使用pub-use-重新导出名称","children":[]},{"level":3,"title":"使用外部包","slug":"使用外部包","link":"#使用外部包","children":[]},{"level":3,"title":"使用嵌套路径消除大量的use","slug":"使用嵌套路径消除大量的use","link":"#使用嵌套路径消除大量的use","children":[]},{"level":3,"title":"通配符*","slug":"通配符","link":"#通配符","children":[]}]},{"level":2,"title":"将模块拆分为不同的文件","slug":"将模块拆分为不同的文件","link":"#将模块拆分为不同的文件","children":[{"level":3,"title":"将模块内容移动到其他文件","slug":"将模块内容移动到其他文件","link":"#将模块内容移动到其他文件","children":[]}]}],"git":{"updatedTime":1731216681000,"contributors":[{"name":"pingzhihe","email":"pzh1760473545@gmail.com","commits":2,"url":"https://github.com/pingzhihe"}]},"filePathRelative":"rust-learning/Package-management.md"}');export{u as comp,r as data};
