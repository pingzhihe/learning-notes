import{_ as s,c as a,a as p,o as t}from"./app-DsOgR8nk.js";const e={};function l(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="闭包-closure" tabindex="-1"><a class="header-anchor" href="#闭包-closure"><span>闭包(closure)</span></a></h1><ul><li>闭包: 可以捕获所在环境的匿名函数</li><li>闭包: <ul><li>是匿名函数</li><li>保存为变量, 作为参数</li><li>可在一个地方创建闭包, 然后在另外一个上下文调用闭包来完成运算</li><li>可从其定义的作用域捕获</li></ul></li></ul><h2 id="生成自定义运动计划的程序" tabindex="-1"><a class="header-anchor" href="#生成自定义运动计划的程序"><span>生成自定义运动计划的程序</span></a></h2><ul><li>算法的逻辑并不是重点, 重点是算法的计算过程需要几秒钟时间</li><li>目标: 不让用户发生不必要等待 <ul><li>仅在必要时调用该算法</li><li>只调用一次</li></ul></li></ul><h2 id="闭包的类型推断" tabindex="-1"><a class="header-anchor" href="#闭包的类型推断"><span>闭包的类型推断</span></a></h2><ul><li>闭包不要求标注参数和返回值类型</li><li>闭包通常很短小, 只在狭小的上下文中工作, 编译器通常能推断出类型</li><li>可以手动添加类型标注</li></ul><h2 id="函数和闭包的定义语法" tabindex="-1"><a class="header-anchor" href="#函数和闭包的定义语法"><span>函数和闭包的定义语法</span></a></h2><p><code>fn add_one_v1(x: u32) -&gt; u32 { x + 1 }</code><code>let add_one_v2 = |x: u32| -&gt; u32 { x + 1 };</code><code>let add_one_v3 = |x| { x + 1 };</code><code>let add_one_v4 = |x| x + 1 ;</code></p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">let</span> example_closure <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">example_closure</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意: 闭包的定义最终只会为参数/返回值推断出唯一具体的类型</li></ul><h2 id="运动程序的另一种解决方案" tabindex="-1"><a class="header-anchor" href="#运动程序的另一种解决方案"><span>运动程序的另一种解决方案</span></a></h2><ul><li>创建一个struct, 它持有闭包及其调用结果</li><li>闭包只会被调用一次</li></ul><h3 id="如何让struct-持有闭包" tabindex="-1"><a class="header-anchor" href="#如何让struct-持有闭包"><span>如何让struct 持有闭包</span></a></h3><ul><li><p>struct 的定义需要知道所有字段的类型</p><ul><li>需要指明闭包的类型</li></ul></li><li><p>每个闭包实例都有自己唯一的匿名类型, 即使两个闭包签名完全一样。</p></li><li><p>所以需要用: 泛型和Trait Bound (第十章)</p></li></ul><h2 id="fn-trait" tabindex="-1"><a class="header-anchor" href="#fn-trait"><span>Fn Trait</span></a></h2><ul><li>Fn traits 由标准库提供</li><li>所有的闭包都至少实现了以下trait之一 <ul><li>Fn</li><li>FnMut</li><li>FnOnce</li></ul></li></ul><p>例子, 利用缓存器 Cacher：</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Cacher</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token keyword">where</span> <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u32</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    calculation<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span></span>
<span class="line">    value<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span> <span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Cacher</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token keyword">where</span> <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u32</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>calculation<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Cacher</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Cacher</span> <span class="token punctuation">{</span></span>
<span class="line">            calculation<span class="token punctuation">,</span></span>
<span class="line">            value<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> arg<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u32</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">match</span> <span class="token keyword">self</span><span class="token punctuation">.</span>value <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Some</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">,</span></span>
<span class="line">            <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>calculation<span class="token punctuation">)</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">self</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                v</span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> simulated_user_specified_value <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> simulated_random_number <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">generate_workout</span><span class="token punctuation">(</span></span>
<span class="line">        simulated_user_specified_value<span class="token punctuation">,</span></span>
<span class="line">        simulated_random_number</span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">generate_workout</span><span class="token punctuation">(</span>intensity<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> random_number<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> expensive_closure <span class="token operator">=</span> <span class="token class-name">Cacher</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>num<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;calculating slowly...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        num</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> intensity <span class="token operator">&lt;</span> <span class="token number">25</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Today, do {} pushups!&quot;</span><span class="token punctuation">,</span> expensive_closure<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>intensity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Next, do {} situps!&quot;</span><span class="token punctuation">,</span> expensive_closure<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>intensity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> random_number <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Take a break today! Remember to stay hydrated!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token macro property">println!</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token string">&quot;Today, run for {} minutes!&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                expensive_closure<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>intensity<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token attribute attr-name">#[cfg(test)]</span></span>
<span class="line"><span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token attribute attr-name">#[test]</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">call_with_different_values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> <span class="token keyword">mut</span> c <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token class-name">Cacher</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>a<span class="token closure-punctuation punctuation">|</span></span> a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">let</span> v1 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">let</span> v2 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>v2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>test result: FAILED</code></p><h3 id="使用缓存器cacher的限制" tabindex="-1"><a class="header-anchor" href="#使用缓存器cacher的限制"><span>使用缓存器Cacher的限制</span></a></h3><ul><li><p>Cacher实例假定针对不同参数arg, value 方法总会得到相同的值</p></li><li><p>可以用HashMap 代替单个值</p><ul><li>key: arg 参数</li><li>value: 闭包调用的结果</li></ul></li><li><p>只能接受一个<code>u32</code>类型的参数和<code>u32</code>类型的返回值</p><ul><li>可以用泛型和trait bound 来改进</li></ul></li></ul><h2 id="闭包可以捕获其环境" tabindex="-1"><a class="header-anchor" href="#闭包可以捕获其环境"><span>闭包可以捕获其环境</span></a></h2><ul><li>闭包可以访问它的作用域内的变量, 而普通参数不行</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// let equal_to_x = |z| z == x;</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">equal_to_x</span><span class="token punctuation">(</span>z<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span> <span class="token punctuation">{</span> z <span class="token operator">==</span> x <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token function">equal_to_x</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这边会报错: <code>can&#39;t capture dynamic environment in a fn item</code> 在Rust中，普通函数不能捕获外部作用域中的变量。这与闭包(closures)的行为不同，闭包可以捕获它们所在作用域中的变量。</p><ul><li>捕获环境会产生内存开销</li></ul><h2 id="闭包从所在环境捕获值的方式" tabindex="-1"><a class="header-anchor" href="#闭包从所在环境捕获值的方式"><span>闭包从所在环境捕获值的方式</span></a></h2><ul><li><p>与函数获得参数的三种方式一样:</p><ol><li>获得所有权: <code>FnOnce</code> 闭包不能多次获取并消耗同一个变量(只能调用一次)</li><li>可变借用: <code>FnMut</code> 闭包可以多次获取可变借用</li><li>不可变借用: <code>Fn</code> 闭包可以多次获取不可变借用</li></ol></li><li><p>创建闭包时, 通过闭包对环境值的使用, Rust 推断出具体使用哪个trait:</p><ul><li>所有闭包都实现了<code>FnOnce</code></li><li>没有移动捕获变量的实现了<code>FnMut</code></li><li>无需可访问捕获变量的闭包也实现了<code>Fn</code></li></ul></li></ul><h2 id="move-关键字" tabindex="-1"><a class="header-anchor" href="#move-关键字"><span>move 关键字</span></a></h2><ul><li>在参数列表前使用move关键字, 可以强制闭包取得它所使用的环境值的所有权 <ul><li>当将闭包传递给新线程以移动数据使其归新线程所有时, 此技术最为有用</li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> x  <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> equal_to_x <span class="token operator">=</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>z<span class="token closure-punctuation punctuation">|</span></span> z <span class="token operator">==</span> x<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;can&#39;t use x here: {:?}&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token function">equal_to_x</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里捕获的x的所有权就被移动到了闭包中, 所以x在闭包外就不能再使用了<br> 报错: <code>value borrowed here after move</code></p><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h2><ul><li>当指定Fn trait bound之一时, 首先使用Fn, 基于闭包体里的情况, 如果需要FnOnce 或 FnMut, 编译器会再告诉你。</li></ul><h1 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器"><span>迭代器</span></a></h1><h2 id="什么是迭代器" tabindex="-1"><a class="header-anchor" href="#什么是迭代器"><span>什么是迭代器</span></a></h2><ul><li><p>迭代器模式: 对一系列项执行某些任务</p></li><li><p>迭代器负责:</p><ul><li>遍历每一个项</li><li>确定序列(遍历)何时完成</li></ul></li><li><p>Rust 的迭代器:</p><ul><li>惰性的: 除非调用消费迭代器的方法, 否则迭代器本身不会有任何效果</li></ul></li></ul><h2 id="iterator-trait-和-next-方法" tabindex="-1"><a class="header-anchor" href="#iterator-trait-和-next-方法"><span>Iterator trait 和 next 方法</span></a></h2><h3 id="iterator-trait" tabindex="-1"><a class="header-anchor" href="#iterator-trait"><span>Iterator trait</span></a></h3><ul><li>所有迭代器都实现了Iterator trait</li><li>Iterator trait 定义于标准库, 定义大致如下:</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">Iterator</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">type</span> <span class="token type-definition class-name">Item</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Item</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 此处省略了方法的默认实现</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>type Item</code> 和 <code>Self::Item</code> 定义了与该trait关联的类型 <ul><li>实现Iterator trait 需要你定义一个Item 类型, 它用于next 方法的返回类型 (迭代器的返回类型)。</li></ul></li></ul><h3 id="itertor-trait" tabindex="-1"><a class="header-anchor" href="#itertor-trait"><span>Itertor trait</span></a></h3><ul><li>Iterator trait 仅要求实现一个方法: next</li><li>next: <ul><li>每次返回迭代器中的一项</li><li>返回的结果返回在Some里</li><li>迭代结束时返回None</li></ul></li><li>可直接在迭代器上调用next 方法</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token attribute attr-name">#[cfg(test)]</span></span>
<span class="line"><span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute attr-name">#[test]</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">iterator_demonstration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> v1 <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">let</span> <span class="token keyword">mut</span> v1_iter <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>v1_iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>v1_iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>v1_iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>v1_iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">None</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="几个迭代方法" tabindex="-1"><a class="header-anchor" href="#几个迭代方法"><span>几个迭代方法</span></a></h3><ul><li>iter 方法: 在不可变引用上创建迭代器</li><li>into_iter 方法: 创建的迭代器会获得所有权</li><li>iter_mut 方法: 迭代可变引用</li></ul><h2 id="消耗-产生迭代器" tabindex="-1"><a class="header-anchor" href="#消耗-产生迭代器"><span>消耗/产生迭代器</span></a></h2><h3 id="消耗迭代器的方法" tabindex="-1"><a class="header-anchor" href="#消耗迭代器的方法"><span>消耗迭代器的方法</span></a></h3><ul><li><p>在标准库中, iterator trait 有一些带默认实现的方法</p></li><li><p>其中有一些方法会调用next 方法</p><ul><li>实现Iterator trait 时必须实现next方法的原因之一</li></ul></li><li><p>调用next 方法叫做消耗迭代器(Consume the Iterator)</p><ul><li>因为调用它们会把迭代器耗尽</li></ul></li><li><p>例如: sum 方法(就会耗尽迭代器)</p></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token attribute attr-name">#[cfg(test)]</span></span>
<span class="line"><span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute attr-name">#[test]</span><span class="token keyword">fn</span> <span class="token function-definition function">iterator_sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> v1 <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">let</span> v1_iter <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">let</span> total<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> v1_iter<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="产生其它迭代器的方法" tabindex="-1"><a class="header-anchor" href="#产生其它迭代器的方法"><span>产生其它迭代器的方法</span></a></h3><ul><li>定义在Iterator trait 的另外一些方法叫做&quot;迭代器适配器&quot; <ul><li>把迭代器变成不同类型的迭代器</li></ul></li><li>可以通过链式调用使用多个迭代器适配器来执行复杂的操作, 这种调用可读性较高。</li><li>例如: map <ul><li>接受一个闭包, 闭包作用于每个元素</li><li>产生一个新的迭代器</li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token attribute attr-name">#[cfg(test)]</span></span>
<span class="line"><span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute attr-name">#[test]</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">iterator_sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> v1 <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">let</span> v2<span class="token punctuation">:</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">&gt;</span> <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token macro property">assert!</span><span class="token punctuation">(</span>v2 <span class="token operator">==</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用闭包捕获环境-迭代器" tabindex="-1"><a class="header-anchor" href="#使用闭包捕获环境-迭代器"><span>使用闭包捕获环境 + 迭代器</span></a></h2><ul><li>filter 方法: <ul><li>接受一个闭包</li><li>这个闭包在遍历迭代器的每个元素的时候, 返回bool类型</li><li>如果闭包返回true, 则当前元素包含在filter产生的新迭代器中</li><li>如果闭包返回false, 则当前元素不包含在filter产生的新迭代器中</li></ul></li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token attribute attr-name">#[derive(PartialEq, Debug)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Shoe</span><span class="token punctuation">{</span></span>
<span class="line">    size<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span></span>
<span class="line">    style<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">shoes_in_my_size</span><span class="token punctuation">(</span>shoes<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Shoe</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> shoe_size<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Shoe</span><span class="token operator">&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    shoes<span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>s<span class="token closure-punctuation punctuation">|</span></span> s<span class="token punctuation">.</span>size <span class="token operator">==</span> shoe_size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[test]</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">filters_by_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> shoes <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span></span>
<span class="line">        <span class="token class-name">Shoe</span><span class="token punctuation">{</span>size<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;sneaker&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">Shoe</span><span class="token punctuation">{</span>size<span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;sandal&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">Shoe</span><span class="token punctuation">{</span>size<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;boot&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> in_my_size <span class="token operator">=</span> <span class="token function">shoes_in_my_size</span><span class="token punctuation">(</span>shoes<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span></span>
<span class="line">        in_my_size<span class="token punctuation">,</span></span>
<span class="line">        <span class="token macro property">vec!</span><span class="token punctuation">[</span></span>
<span class="line">            <span class="token class-name">Shoe</span><span class="token punctuation">{</span>size<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;sneaker&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token class-name">Shoe</span><span class="token punctuation">{</span>size<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;boot&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建自定义的迭代器" tabindex="-1"><a class="header-anchor" href="#创建自定义的迭代器"><span>创建自定义的迭代器</span></a></h2><h3 id="使用iterator-trait-创建自定义迭代器" tabindex="-1"><a class="header-anchor" href="#使用iterator-trait-创建自定义迭代器"><span>使用Iterator trait 创建自定义迭代器</span></a></h3><ul><li>实现next 方法</li></ul><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Counter</span><span class="token punctuation">{</span></span>
<span class="line">    count<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span> <span class="token class-name">Counter</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Counter</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Counter</span><span class="token punctuation">{</span>count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span> <span class="token class-name">Iterator</span> <span class="token keyword">for</span> <span class="token class-name">Counter</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">type</span> <span class="token type-definition class-name">Item</span> <span class="token operator">=</span> <span class="token keyword">u32</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Item</span><span class="token operator">&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">None</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[test]</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">calling_next_directly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> counter <span class="token operator">=</span> <span class="token class-name">Counter</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">None</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[test]</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">using_other_iterator_trait_methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> sum<span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> <span class="token class-name">Counter</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span><span class="token class-name">Counter</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token closure-punctuation punctuation">|</span></span> a<span class="token operator">*</span>b<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x<span class="token operator">%</span><span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="性能比较-循环-vs-迭代器" tabindex="-1"><a class="header-anchor" href="#性能比较-循环-vs-迭代器"><span>性能比较: 循环 vs 迭代器</span></a></h2><ul><li>迭代器的性能不会比手写的循环差</li></ul><h3 id="零开销抽象-zero-cost-abstractions" tabindex="-1"><a class="header-anchor" href="#零开销抽象-zero-cost-abstractions"><span>零开销抽象 Zero-Cost Abstractions</span></a></h3><ul><li>使用抽象的时候不会引入额外运行时开销</li></ul>`,66)]))}const i=s(e,[["render",l],["__file","Closure.html.vue"]]),u=JSON.parse('{"path":"/rust-learning/Closure.html","title":"闭包(closure)","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"生成自定义运动计划的程序","slug":"生成自定义运动计划的程序","link":"#生成自定义运动计划的程序","children":[]},{"level":2,"title":"闭包的类型推断","slug":"闭包的类型推断","link":"#闭包的类型推断","children":[]},{"level":2,"title":"函数和闭包的定义语法","slug":"函数和闭包的定义语法","link":"#函数和闭包的定义语法","children":[]},{"level":2,"title":"运动程序的另一种解决方案","slug":"运动程序的另一种解决方案","link":"#运动程序的另一种解决方案","children":[{"level":3,"title":"如何让struct 持有闭包","slug":"如何让struct-持有闭包","link":"#如何让struct-持有闭包","children":[]}]},{"level":2,"title":"Fn Trait","slug":"fn-trait","link":"#fn-trait","children":[{"level":3,"title":"使用缓存器Cacher的限制","slug":"使用缓存器cacher的限制","link":"#使用缓存器cacher的限制","children":[]}]},{"level":2,"title":"闭包可以捕获其环境","slug":"闭包可以捕获其环境","link":"#闭包可以捕获其环境","children":[]},{"level":2,"title":"闭包从所在环境捕获值的方式","slug":"闭包从所在环境捕获值的方式","link":"#闭包从所在环境捕获值的方式","children":[]},{"level":2,"title":"move 关键字","slug":"move-关键字","link":"#move-关键字","children":[]},{"level":2,"title":"最佳实践","slug":"最佳实践","link":"#最佳实践","children":[]},{"level":2,"title":"什么是迭代器","slug":"什么是迭代器","link":"#什么是迭代器","children":[]},{"level":2,"title":"Iterator trait 和 next 方法","slug":"iterator-trait-和-next-方法","link":"#iterator-trait-和-next-方法","children":[{"level":3,"title":"Iterator trait","slug":"iterator-trait","link":"#iterator-trait","children":[]},{"level":3,"title":"Itertor trait","slug":"itertor-trait","link":"#itertor-trait","children":[]},{"level":3,"title":"几个迭代方法","slug":"几个迭代方法","link":"#几个迭代方法","children":[]}]},{"level":2,"title":"消耗/产生迭代器","slug":"消耗-产生迭代器","link":"#消耗-产生迭代器","children":[{"level":3,"title":"消耗迭代器的方法","slug":"消耗迭代器的方法","link":"#消耗迭代器的方法","children":[]},{"level":3,"title":"产生其它迭代器的方法","slug":"产生其它迭代器的方法","link":"#产生其它迭代器的方法","children":[]}]},{"level":2,"title":"使用闭包捕获环境 + 迭代器","slug":"使用闭包捕获环境-迭代器","link":"#使用闭包捕获环境-迭代器","children":[]},{"level":2,"title":"创建自定义的迭代器","slug":"创建自定义的迭代器","link":"#创建自定义的迭代器","children":[{"level":3,"title":"使用Iterator trait 创建自定义迭代器","slug":"使用iterator-trait-创建自定义迭代器","link":"#使用iterator-trait-创建自定义迭代器","children":[]}]},{"level":2,"title":"性能比较: 循环 vs 迭代器","slug":"性能比较-循环-vs-迭代器","link":"#性能比较-循环-vs-迭代器","children":[{"level":3,"title":"零开销抽象 Zero-Cost Abstractions","slug":"零开销抽象-zero-cost-abstractions","link":"#零开销抽象-zero-cost-abstractions","children":[]}]}],"git":{"updatedTime":1731217109000,"contributors":[{"name":"pingzhihe","email":"pzh1760473545@gmail.com","commits":1,"url":"https://github.com/pingzhihe"}]},"filePathRelative":"rust-learning/Closure.md"}');export{i as comp,u as data};
