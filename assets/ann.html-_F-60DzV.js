import{_ as a,c as n,a as t,o as e}from"./app-DsOgR8nk.js";const p="/learning-notes/assets/image-6-CRHRGRbP.png",i="/learning-notes/assets/image-7-BWndnLPn.png",l="/learning-notes/assets/image-8-B8Crs1bF.png",m="/learning-notes/assets/image-9-D0jKv0kV.png",r="/learning-notes/assets/image-10-DM2xI1nE.png",o={};function c(h,s){return e(),n("div",null,s[0]||(s[0]=[t('<h1 id="precepction-and-artificial-neural-network" tabindex="-1"><a class="header-anchor" href="#precepction-and-artificial-neural-network"><span>Precepction and Artificial Neural Network</span></a></h1><h2 id="convolutional-neural-network" tabindex="-1"><a class="header-anchor" href="#convolutional-neural-network"><span>Convolutional Neural Network</span></a></h2><p><strong>Convolution</strong> Measures how the shape of one function matches the other as it <strong>slides</strong> along.</p><p><strong>Convolution on 2D images</strong><img src="'+p+'" alt="alt text"></p><p>Using filter to perform element-wize multiplication</p><p><img src="'+i+'" alt="alt text"></p><p><strong>Convolution filters (aka kernels)</strong></p><p>Filters/kernels can identify different patterns <img src="'+l+'" alt="alt text"></p><ul><li>When input and kernel have the same patern: high activation response</li></ul><p><strong>2D example</strong> Response map: 2D map of the presence of a pattern at different locations in an input</p><h3 id="convolution-parameters" tabindex="-1"><a class="header-anchor" href="#convolution-parameters"><span>Convolution parameters</span></a></h3><p>Key <em>hyperparameters</em> in convolution</p><ul><li>Kernel size: size of the patches</li><li>Number of filters: depth(channel) of the input</li><li>Stride: how far to &quot;slide&quot; pacth across input</li><li>Padding of input boundaries with zeros</li></ul><p>parameter calculation:</p><p>Convolution layer: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>k height</mtext><mo>×</mo><mtext>k width</mtext><mo>×</mo><mtext>num of inputs</mtext><mo>×</mo><mtext>num of kernels</mtext></mrow><annotation encoding="application/x-tex">\\text{k height} \\times \\text{k width} \\times \\text{num of inputs} \\times \\text{num of kernels}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">k height</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord text"><span class="mord">k width</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">num of inputs</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord text"><span class="mord">num of kernels</span></span></span></span></span></p><p>Output: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mtext>input</mtext><mo>−</mo><mtext>kernel</mtext><mo>+</mo><mtext>padding</mtext><mo>×</mo><mn>2</mn></mrow><mtext>stride</mtext></mfrac><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\\frac{\\text{input}- \\text{kernel} + \\text{padding} \\times 2 } {\\text{stride}} + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2772em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">stride</span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">input</span></span><span class="mbin mtight">−</span><span class="mord text mtight"><span class="mord mtight">kernel</span></span><span class="mbin mtight">+</span><span class="mord text mtight"><span class="mord mtight">padding</span></span><span class="mbin mtight">×</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p>Maxpooling layer: Because the maxpooling extract the feature using functions like <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>max</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\\max</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mop">max</span></span></span></span>, it does not have parameters</p><p>Output: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mtext>input size</mtext><mo>−</mo><mtext>pool size</mtext><mo>+</mo><mtext>padding</mtext><mo>×</mo><mn>2</mn></mrow><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>d</mi><mi>e</mi></mrow></mfrac><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\\frac{\\text{input size}- \\text{pool size} + \\text{padding} \\times 2 }{stride} + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2772em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">input size</span></span><span class="mbin mtight">−</span><span class="mord text mtight"><span class="mord mtight">pool size</span></span><span class="mbin mtight">+</span><span class="mord text mtight"><span class="mord mtight">padding</span></span><span class="mbin mtight">×</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><h3 id="components-of-a-cnn" tabindex="-1"><a class="header-anchor" href="#components-of-a-cnn"><span>Components of a CNN</span></a></h3><p><strong>Convolutional layers</strong></p><ul><li>Complex input representations based on convolution operation</li><li>Filter weights are learned from training data</li></ul><p><strong>Downsampling, usually via Max Pooling</strong></p><ul><li>Re-scales to smaller resolution, limits parameter explosion</li></ul><p><strong>Fully connected parts and output layer</strong></p><ul><li>Merges representations together</li></ul><p><strong>Downsampling via max pooling (re)</strong></p><p>Max pooling helps reduce the spatial dimensions (height and width) of the feature maps while keeping the most important information.</p><ul><li><p>Maxpooling takes an <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>×</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">m \\times m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> patch (window) from the input feature map and selects the <strong>maximum</strong> value from that patch. <img src="'+m+'" alt="alt text"></p></li><li><p>Forward pass records maximising element, which is then used in the backward pass during back-propagation</p></li></ul><p><strong>Convolution + Max Pooling Achieves Translation Invariance</strong></p><p>If the input image is shifted slightly, the network can still recognize the same feature</p><p>Consider shift input image:</p><ul><li>exact same kernels will activate, with same responses</li><li>max-pooling over the kernel outputs gives same output</li><li>size of max-pooling patch limits the extent of invariance</li></ul><p><strong>Can include padding around input boundaries</strong></p><h2 id="recurrent-neural-networks-attention-and-the-transformer" tabindex="-1"><a class="header-anchor" href="#recurrent-neural-networks-attention-and-the-transformer"><span>Recurrent Neural Networks, Attention, and the Transformer</span></a></h2><h3 id="recurrent-netwoks" tabindex="-1"><a class="header-anchor" href="#recurrent-netwoks"><span>Recurrent Netwoks</span></a></h3><p><strong>Recurrent Neural Nets(RNNS)</strong> RNN creats networks dynamically, based on input sequence.</p><ul><li>Given sequence of inputs <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup><mo separator="true">,</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></msup><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">x^{(1)},x^{(2)},\\ldots,x^{(t)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0824em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">t</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span></li><li>Process each symbol from left to right, to form a sequence of hidden state <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>h</mi><mrow><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">h^{(t)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.888em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">t</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span></li><li>Each <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>h</mi><mrow><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">h^{(t)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.888em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">t</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span> encodes all inputs up to <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span></li></ul><p><img src="'+r+'" alt="alt text"></p><p><strong>Long Short-Term Memory</strong></p><ul><li>LSTM introduces state self-loop, based on copying <ul><li>Takes copy of previous state, scales by sigmoid forget gate</li></ul></li><li>Gradient magnitude now maintained <ul><li>Can handle 100+ distance phenimena (vs 5-19 for RNN)</li></ul></li></ul><h3 id="transformers" tabindex="-1"><a class="header-anchor" href="#transformers"><span>Transformers</span></a></h3><p>RNNs over long sequences not to good at representing proprties of the full sequence</p><p><strong>Attention</strong> averages over hidden sequence</p><ul><li>Avoids bottleneck, and uncovers meaningful stucture</li></ul><p><strong>Self-Atention</strong></p><ul><li><strong>Transformers</strong> use attention as means of representing sequences directly, instead of RNN.</li></ul>',46)]))}const u=a(o,[["render",c],["__file","ann.html.vue"]]),d=JSON.parse('{"path":"/stat-machine-learning/ann.html","title":"Precepction and Artificial Neural Network","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Convolutional Neural Network","slug":"convolutional-neural-network","link":"#convolutional-neural-network","children":[{"level":3,"title":"Convolution parameters","slug":"convolution-parameters","link":"#convolution-parameters","children":[]},{"level":3,"title":"Components of a CNN","slug":"components-of-a-cnn","link":"#components-of-a-cnn","children":[]}]},{"level":2,"title":"Recurrent Neural Networks, Attention, and the Transformer","slug":"recurrent-neural-networks-attention-and-the-transformer","link":"#recurrent-neural-networks-attention-and-the-transformer","children":[{"level":3,"title":"Recurrent Netwoks","slug":"recurrent-netwoks","link":"#recurrent-netwoks","children":[]},{"level":3,"title":"Transformers","slug":"transformers","link":"#transformers","children":[]}]}],"git":{"updatedTime":1730726714000,"contributors":[{"name":"pingzhihe","email":"pzh1760473545@gmail.com","commits":4,"url":"https://github.com/pingzhihe"}]},"filePathRelative":"stat-machine-learning/ann.md"}');export{u as comp,d as data};
