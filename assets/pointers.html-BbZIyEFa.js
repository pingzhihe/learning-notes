import{_ as s,c as a,a as e,o as t}from"./app-DsOgR8nk.js";const p={};function l(i,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="compound-types-references-and-pointers" tabindex="-1"><a class="header-anchor" href="#compound-types-references-and-pointers"><span>Compound Types: References and Pointers</span></a></h1><h2 id="_1-value-categories-lvalues-and-rvalues" tabindex="-1"><a class="header-anchor" href="#_1-value-categories-lvalues-and-rvalues"><span>1. Value categories (lvalues and rvalues)</span></a></h2><p>The <strong>value category</strong> of an expression (or subexpression) indicates whether an expression resolves to a value, a function, or an object of some kind.</p><ul><li>Prior to C++11, there were only two possible value categories: <code>lvalue</code> and <code>rvalue</code>.</li><li>In C++11, three additional value categories (<code>glvalue</code>, <code>prvalue</code>, and <code>xvalue</code>) were added to support a new feature called <code>move semantics</code>.</li></ul><h3 id="lvalue-and-rvalue-expressions" tabindex="-1"><a class="header-anchor" href="#lvalue-and-rvalue-expressions"><span>Lvalue and rvalue expressions</span></a></h3><p>An lvalue is an expression that evaluates to an identifiable object or function (or bit-field).</p><p>Entities with identities can be accessed via an identifier, reference, or pointer, and typically have a lifetime longer than a single expression or statement.</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> x <span class="token punctuation">{</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> y <span class="token punctuation">{</span> x <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// x is an lvalue expression</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>lvalues come in two subtypes: a <strong>modifiable lvalue</strong> is an lvalue whose value can be modified. A <strong>non-modifiable lvalue</strong> is an lvalue whose value can’t be modified (because the lvalue is const or constexpr).</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> x<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">double</span> d<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">int</span> y <span class="token punctuation">{</span> x <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// x is a modifiable lvalue expression</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">double</span> e <span class="token punctuation">{</span> d <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// d is a non-modifiable lvalue expression</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>An rvalue is an expression that is not an lvalue. Rvalue expressions evaluate to a value. Commonly seen rvalues include literals (except C-style string literals, which are lvalues) and the return value of functions and operators that return by value. Rvalues aren’t <strong>identifiable</strong> (meaning they have to be used immediately), and only exist within the scope of the expression in which they are used.</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">return5</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> x<span class="token punctuation">{</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 5 is an rvalue expression</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">double</span> d<span class="token punctuation">{</span> <span class="token number">1.2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 1.2 is an rvalue expression</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">int</span> y <span class="token punctuation">{</span> x <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// x is a modifiable lvalue expression</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">double</span> e <span class="token punctuation">{</span> d <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// d is a non-modifiable lvalue expression</span></span>
<span class="line">    <span class="token keyword">int</span> z <span class="token punctuation">{</span> <span class="token function">return5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// return5() is an rvalue expression (since the result is returned by value)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">int</span> w <span class="token punctuation">{</span> x <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// x + 1 is an rvalue expression</span></span>
<span class="line">    <span class="token keyword">int</span> q <span class="token punctuation">{</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// the result of static casting d to an int is an rvalue expression</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>why <code>return5()</code>, <code>x + 1</code>, and <code>static_cast&lt;int&gt;(d)</code> are rvalues: the answer is because these expressions produce temporary values that are not identifiable objects.</p><p>A method to determine whether an expression is <strong>lvalue</strong> or <strong>rvalue</strong>:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// T&amp; is an lvalue reference, so this overload will be preferred for lvalues    </span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">is_lvalue</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// T&amp;&amp; is an rvalue reference, so this overload will be preferred for rvalues</span></span>
<span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">is_lvalue</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// A helper macro (#expr prints whatever is passed in for expr as text)</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">PRINTVCAT</span><span class="token expression"><span class="token punctuation">(</span>expr<span class="token punctuation">)</span> <span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> #expr <span class="token operator">&lt;&lt;</span> </span><span class="token string">&quot; is an &quot;</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token function">is_lvalue</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span> <span class="token operator">?</span> </span><span class="token string">&quot;lvalue\\n&quot;</span> <span class="token expression"><span class="token operator">:</span> </span><span class="token string">&quot;rvalue\\n&quot;</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">getint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">PRINTVCAT</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">PRINTVCAT</span><span class="token punctuation">(</span><span class="token function">getint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> x <span class="token punctuation">{</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">PRINTVCAT</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">PRINTVCAT</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string <span class="token punctuation">{</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">PRINTVCAT</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lvalue-to-rvalue-conversion" tabindex="-1"><a class="header-anchor" href="#lvalue-to-rvalue-conversion"><span>Lvalue to rvalue conversion</span></a></h3><p>Let’s take a look at this example again:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> x <span class="token punctuation">{</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> y <span class="token punctuation">{</span> x <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// x is an lvalue expression</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If <code>x</code> is an lvalue expression that evaluates to variable <code>x</code>, then how does <code>y</code> end up with value <code>5</code>?</p><p>The answer is that lvalue expressions will implicitly convert to rvalue expressions in contexts where an rvalue is expected but an lvalue is provided.</p><p><strong>Key insight</strong>:</p><ul><li>Lvalue expressions are those that evaluate to functions or identifiable objects (including variables) that persist beyond the end of the expression.</li><li>Rvalue expressions are those that evaluate to values, including literals and temporary objects that do not persist beyond the end of the expression.</li></ul><h2 id="_2-lvalue-references" tabindex="-1"><a class="header-anchor" href="#_2-lvalue-references"><span>2. Lvalue references</span></a></h2><p>In C++, a <strong>reference</strong> is an alias for an existing object. Once a reference has been defined, any operation on the reference is applied to the object being referenced. This means we can use a reference to read or modify the object being referenced.</p><p>An <strong>lvalue reference</strong> (commonly just called a “reference” since prior to C++11 there was only one type of reference) acts as an alias for an existing lvalue (such as a variable).</p><p>Just like the type of an object determines what kind of value it can hold, the type of a reference determines what type of object it can reference. Lvalue reference types can be identified by use of a single ampersand (&amp;) in the type specifier:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// regular types</span></span>
<span class="line"><span class="token keyword">int</span>        <span class="token comment">// a normal int type (not an reference)</span></span>
<span class="line"><span class="token keyword">int</span><span class="token operator">&amp;</span>       <span class="token comment">// an lvalue reference to an int object</span></span>
<span class="line"><span class="token keyword">double</span><span class="token operator">&amp;</span>    <span class="token comment">// an lvalue reference to a double object</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token comment">// an lvalue reference to a const int object</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lvalue-reference-variables" tabindex="-1"><a class="header-anchor" href="#lvalue-reference-variables"><span>Lvalue reference variables</span></a></h3><p>One of the things we can do with an lvalue reference type is create an lvalue reference variable. An <strong>lvalue reference variable</strong> is a variable that acts as a reference to an lvalue (usually another variable).</p><p>To create an lvalue reference variable, we simply define a variable with an lvalue reference type:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> x <span class="token punctuation">{</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">// x is a normal integer variable</span></span>
<span class="line">    <span class="token keyword">int</span><span class="token operator">&amp;</span> ref <span class="token punctuation">{</span> x <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// ref is an lvalue reference variable that can now be used as an alias for variable x</span></span>
<span class="line"></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>  <span class="token comment">// print the value of x (5)</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ref <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token comment">// print the value of x via ref (5)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above example, the type <code>int&amp;</code> defines <code>ref</code> as an lvalue reference to an int, which we then initialize with lvalue expression <code>x</code>. Thereafter, <code>ref</code> and <code>x</code> can be used synonymously. This program thus prints:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">5</span>
<span class="line">5</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><em>When defining a reference, place the ampersand next to the type (not the reference variable’s name).</em></p><h3 id="modifying-values-through-a-non-const-lvalue-reference" tabindex="-1"><a class="header-anchor" href="#modifying-values-through-a-non-const-lvalue-reference"><span>Modifying values through a non-const lvalue reference</span></a></h3><p>In the above example, we showed that we can use a reference to read the value of the object being referenced. We can also use a non-const reference to modify the value of the object being referenced:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> x <span class="token punctuation">{</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// normal integer variable</span></span>
<span class="line">    <span class="token keyword">int</span><span class="token operator">&amp;</span> ref <span class="token punctuation">{</span> x <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// ref is now an alias for variable x</span></span>
<span class="line"></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> ref <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token comment">// print 55</span></span>
<span class="line"></span>
<span class="line">    x <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment">// x now has value 6</span></span>
<span class="line"></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> ref <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token comment">// prints 66</span></span>
<span class="line"></span>
<span class="line">    ref <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment">// the object being referenced (x) now has value 7</span></span>
<span class="line"></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> ref <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token comment">// prints 77</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rederence-initialization" tabindex="-1"><a class="header-anchor" href="#rederence-initialization"><span>Rederence initialization</span></a></h3><p>Much like constants, all references must be initialized. References are initialized using a form of initialization called <strong>reference initialization</strong>.</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span><span class="token operator">&amp;</span> invalidRef<span class="token punctuation">;</span>   <span class="token comment">// error: references must be initialized</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">int</span> x <span class="token punctuation">{</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span><span class="token operator">&amp;</span> ref <span class="token punctuation">{</span> x <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// okay: reference to int is bound to int variable</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A reference will (usually) only bind to an object matching its referenced type</li><li>References can’t be reseated (changed to refer to another object)</li><li>Reference variables follow the same scoping and duration rules that normal variables</li></ul><h3 id="references-and-referents-have-independent-lifetimes" tabindex="-1"><a class="header-anchor" href="#references-and-referents-have-independent-lifetimes"><span>References and referents have independent lifetimes</span></a></h3><p>With one exception (that we’ll cover next lesson), the lifetime of a reference and the lifetime of its referent are independent. In other words, both of the following are true:</p><ul><li>A reference can be destroyed before the object it is referencing.</li><li>The object being referenced can be destroyed before the reference.</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> x <span class="token punctuation">{</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span><span class="token operator">&amp;</span> ref <span class="token punctuation">{</span> x <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment">// ref is a reference to x</span></span>
<span class="line">        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ref <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token comment">// prints value of ref (5)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token comment">// ref is destroyed here -- x is unaware of this</span></span>
<span class="line"></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token comment">// prints value of x (5)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token comment">// x destroyed here</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above prints:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">5</span>
<span class="line">5</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>When <code>ref</code> dies, variable <code>x</code> carries on as normal, blissfully unaware that a reference to it has been destroyed.</p><h3 id="dangling-references" tabindex="-1"><a class="header-anchor" href="#dangling-references"><span>Dangling references</span></a></h3><p>When an object being reference is destoryed before a reference to it, the reference is left referencing an object that no longer exists. Such a reference is called a <strong>dangling reference</strong>.</p><h3 id="references-aren-t-objects" tabindex="-1"><a class="header-anchor" href="#references-aren-t-objects"><span>References aren&#39;t objects</span></a></h3><p>References are not objects in C++. A reference is not required to exist or occupy storage. If possible, the compiler will optimize references away by replacing all occurrences of a reference with the referent. However, this isn’t always possible, and in such cases, references may require storage.</p><h2 id="_3-pass-by-lvalue-reference" tabindex="-1"><a class="header-anchor" href="#_3-pass-by-lvalue-reference"><span>3. Pass by lvalue reference</span></a></h2><p>Why create an alias to a variable when you can just use the variable itself?</p><p><code>pass by value</code>: where an argument passed to a function is <strong>copied</strong> into the function’s parameter:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">printValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token comment">// y is destroyed here</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> x <span class="token punctuation">{</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">printValue</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x is passed by value (copied) into parameter y (inexpensive)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above program, when <code>printValue(x)</code> is called, the value of <code>x</code> (2) is copied into parameter <code>y</code>. Then, at the end of the function, object <code>y</code> is destroyed.</p><p>This means that when we called the function, we made a copy of our argument’s value, only to use it briefly and then destroy it! Fortunately, because fundamental types are cheap to copy, this isn’t a problem.</p><h3 id="some-objects-are-expensive-to-copy" tabindex="-1"><a class="header-anchor" href="#some-objects-are-expensive-to-copy"><span>Some objects are expensive to copy</span></a></h3><p>Most of the types provided by the standard library (such as <code>std::string</code>) are <code>class types</code>. Class types are usually expensive to copy. Whenever possible, we want to avoid making unnecessary copies of objects that are expensive to copy, especially when we will destroy those copies almost immediately.</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">printValue</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string y<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token comment">// y is destroyed here</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>string x <span class="token punctuation">{</span> <span class="token string">&quot;Hello, world!&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// x is a std::string</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">printValue</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x is passed by value (copied) into parameter y (expensive)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This prints:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Hello, world!</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>While this program behaves like we expect, it’s also inefficient. Identically to the prior example, when <code>printValue()</code> is called, argument <code>x</code> is copied into <code>printValue()</code> parameter <code>y</code>. However, in this example, the argument is a <code>std::string</code> instead of an <code>int</code>, and <code>std::string</code> is a class type that is expensive to copy. And this expensive copy is made every time <code>printValue()</code> is called!</p><p>We can do better.</p><h3 id="pass-by-reference" tabindex="-1"><a class="header-anchor" href="#pass-by-reference"><span>Pass by reference</span></a></h3><p>One way to avoid making an expensive copy of an argument when calling a function is to use <code>pass by reference</code> instead of <code>pass by value</code>. When using <code>pass by reference</code>, we declare a function parameter as a reference type (or const reference type) rather than as a normal type. When the function is called, each reference parameter is bound to the appropriate argument. Because the reference acts as an alias for the argument, no copy of the argument is made.</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">printValue</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> y<span class="token punctuation">)</span> <span class="token comment">// type changed to std::string&amp;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token comment">// y is destroyed here</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>string x <span class="token punctuation">{</span> <span class="token string">&quot;Hello, world!&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">printValue</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x is now passed by reference into reference parameter y (inexpensive)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This program is identical to the prior one, except the type of parameter <code>y</code> has been changed from <code>std::string</code> to <code>std::string&amp;</code> (an lvalue reference). Now, when <code>printValue(x)</code> is called, lvalue reference parameter <code>y</code> is bound to argument <code>x</code>. <strong>Binding a reference is always inexpensive</strong>, and no copy of <code>x</code> needs to be made. Because a reference acts as an alias for the object being referenced, when <code>printValue()</code> uses reference <code>y</code>, it’s accessing the actual argument <code>x</code> (rather than a copy of <code>x</code>).</p><h3 id="pass-by-reference-allows-us-to-change-the-value-of-an-argument" tabindex="-1"><a class="header-anchor" href="#pass-by-reference-allows-us-to-change-the-value-of-an-argument"><span>Pass by reference allows us to change the value of an argument</span></a></h3><p>When an object is passed by value, the function parameter receives a copy of the argument. This means that any changes to the value of the parameter are made to the copy of the argument, not the argument itself:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">addOne</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token comment">// y is a copy of x</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">++</span>y<span class="token punctuation">;</span> <span class="token comment">// this modifies the copy of x, not the actual object x</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> x <span class="token punctuation">{</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;value = &quot;</span> <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">addOne</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;value = &quot;</span> <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token comment">// x has not been modified</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above program, because value parameter y is a copy of x, when we increment y, this only affects y. This program outputs:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">value = 5</span>
<span class="line">value = 5</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>However, since a reference acts identically to the object being referenced, when using pass by reference, any changes made to the reference parameter <em>will</em> affect the argument:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">addOne</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> y<span class="token punctuation">)</span> <span class="token comment">// y is bound to the actual object x</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">++</span>y<span class="token punctuation">;</span> <span class="token comment">// this modifies the actual object x</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> x <span class="token punctuation">{</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;value = &quot;</span> <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">addOne</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;value = &quot;</span> <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token comment">// x has been modified</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This program outputs:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">value = 5</span>
<span class="line">value = 6</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pass-by-const-lvalue-reference" tabindex="-1"><a class="header-anchor" href="#pass-by-const-lvalue-reference"><span>Pass by const lvalue reference</span></a></h3><p>Unlike a reference to non-const (which can only bind to modifiable lvalues), a reference to const can bind to modifiable lvalues, non-modifiable lvalues, and rvalues. Therefore, if we make a reference parameter const, then it will be able to bind to any type of argument:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">printRef</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> y<span class="token punctuation">)</span> <span class="token comment">// y is a const reference</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> x <span class="token punctuation">{</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printRef</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// ok: x is a modifiable lvalue, y binds to x</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">int</span> z <span class="token punctuation">{</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printRef</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// ok: z is a non-modifiable lvalue, y binds to z</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">printRef</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// ok: 5 is rvalue literal, y binds to temporary int object</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Passing by const reference offers the same primary benefit as pass by reference (avoiding making a copy of the argument), while also guaranteeing that the function can not change the value being referenced.</p><p>For example, the following is disallowed, because <code>ref</code> is const:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">addOne</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> ref<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">++</span>ref<span class="token punctuation">;</span> <span class="token comment">// not allowed: ref is const</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Best practice</strong></p><p>Favor passing by const reference over passing by non-const reference unless you have a specific reason to do otherwise (e.g. the function needs to change the value of an argument).</p><h3 id="when-to-use-pass-by-value-vs-pass-by-const-reference" tabindex="-1"><a class="header-anchor" href="#when-to-use-pass-by-value-vs-pass-by-const-reference"><span>When to use pass by value vs pass by (const) reference</span></a></h3><p>For most C++ beginners, the choice of whether to use pass by value or pass by (const) reference isn’t very obvious. Fortunately, there’s a straightforward rule of thumb that will serve you well in the majority cases.</p><ul><li>Fundamental types and enumerated types are cheap to copy, so they are typically passed by value.</li><li>Class types can be expensive to copy (sometimes significantly so), so they are typically passed by const reference.</li></ul><h2 id="_4-introduction-to-pointers" tabindex="-1"><a class="header-anchor" href="#_4-introduction-to-pointers"><span>4. Introduction to pointers</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">char</span> x <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// chars use 1 byte of memory</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Simplifying a bit, when the code generated for this definition is executed, a piece of memory from RAM will be assigned to this object. For the sake of example, let’s say that the variable x is assigned memory address <code>140</code>. Whenever we use variable <code>x</code> in an expression or statement, the program will go to memory address 140 to access the value stored there.</p><h3 id="the-address-of-operator" tabindex="-1"><a class="header-anchor" href="#the-address-of-operator"><span>The address-of operator (&amp;)</span></a></h3><p>Although the memory addresses used by variables aren’t exposed to us by default, we do have access to this information. The address-of operator (&amp;) returns the memory address of its operand. This is pretty straightforward:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> x<span class="token punctuation">{</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>  <span class="token comment">// print the value of variable x</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>x <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token comment">// print the memory address of variable x</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In author&#39;s machine, the above program printed:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">5</span>
<span class="line">0x7ffca25cc314</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above example, we use the address-of operator (&amp;) to retrieve the address assigned to variable x and print that address to the console. Memory addresses are typically printed as hexadecimal values.</p><p>For objects that use more than one byte of memory, address-of will return the memory address of the <strong>first byte</strong> used by the object.</p><p>The &amp; symbol tends to cause confusion because it has different meanings depending on context:</p><ul><li>When following a type name, &amp; denotes an lvalue reference: <code>int&amp; ref</code>.</li><li>When used in a unary context in an expression, &amp; is the address-of operator: <code>std::cout &lt;&lt; &amp;x</code>.</li><li>When used in a binary context in an expression, &amp; is the Bitwise AND operator: <code>std::cout &lt;&lt; x &amp; y</code>.</li></ul><h3 id="the-dereference-operator" tabindex="-1"><a class="header-anchor" href="#the-dereference-operator"><span>The dereference operator (*)</span></a></h3><p>The most useful thing we can do with an address is access the value stored at that address. The dereference operator (*) (also occasionally called the indirection operator) returns the value at a given memory address as an lvalue:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> x<span class="token punctuation">{</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>  <span class="token comment">// print the value of variable x</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>x <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token comment">// print the memory address of variable x</span></span>
<span class="line"></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token comment">// print the value at the memory address of variable x (parentheses not required, but make it easier to read)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Output:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">5</span>
<span class="line">0x7ffeee769914</span>
<span class="line">5</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The address-of operator (&amp;) and dereference operator (*) work as opposites: address-of gets the address of an object, and dereference gets the object at an address.</p><h3 id="pointers" tabindex="-1"><a class="header-anchor" href="#pointers"><span>Pointers</span></a></h3><p><strong>A pointer</strong> is an object that holds a memory address (typically of another variable) as its value. This allows us to store the address of some other object to use later.</p><p>In modern C++, the pointers we are talking about here are sometimes called “raw pointers” or “dumb pointers”, to help differentiate them from “smart pointers” that were introduced into the language more recently.</p><p>Much like reference types are declared using an ampersand (&amp;) character, pointer types are declared using an asterisk (*):</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">int</span><span class="token punctuation">;</span>  <span class="token comment">// a normal int</span></span>
<span class="line"><span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token punctuation">;</span> <span class="token comment">// an lvalue reference to an int value</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">;</span> <span class="token comment">// a pointer to an int value (holds the address of an integer value)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To create a pointer variable, we simply define a variable with a pointer type:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> x <span class="token punctuation">{</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">// normal variable</span></span>
<span class="line">    <span class="token keyword">int</span><span class="token operator">&amp;</span> ref <span class="token punctuation">{</span> x <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// a reference to an integer (bound to x)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">int</span><span class="token operator">*</span> ptr<span class="token punctuation">;</span>       <span class="token comment">// a pointer to an integer</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Like normal variables, pointers are not initialized by default. A pointer that has not been initialized is sometimes called a <strong>wild pointer</strong>. Wild pointers contain a garbage address, and dereferencing a wild pointer will result in undefined behavior. Because of this, you should always initialize your pointers to a known value.</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> x<span class="token punctuation">{</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span><span class="token operator">&amp;</span> ref <span class="token punctuation">{</span> x <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// get a reference to x</span></span>
<span class="line">    <span class="token keyword">int</span><span class="token operator">*</span> ptr <span class="token punctuation">{</span> <span class="token operator">&amp;</span>x <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// get a pointer to x</span></span>
<span class="line"></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">;</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ref<span class="token punctuation">;</span>  <span class="token comment">// use the reference to print x&#39;s value (5)</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ptr <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token comment">// use the pointer to print x&#39;s value (5)</span></span>
<span class="line"></span>
<span class="line">    ref <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment">// use the reference to change the value of x</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">;</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ref<span class="token punctuation">;</span>  <span class="token comment">// use the reference to print x&#39;s value (6)</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ptr <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token comment">// use the pointer to print x&#39;s value (6)</span></span>
<span class="line"></span>
<span class="line">    <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment">// use the pointer to change the value of x</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">;</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ref<span class="token punctuation">;</span>  <span class="token comment">// use the reference to print x&#39;s value (7)</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ptr <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token comment">// use the pointer to print x&#39;s value (7)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Outputs:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">555</span>
<span class="line">666</span>
<span class="line">777</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="the-address-of-operator-returns-a-pointer" tabindex="-1"><a class="header-anchor" href="#the-address-of-operator-returns-a-pointer"><span>The address-of operator returns a pointer</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;typeinfo&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">int</span> x<span class="token punctuation">{</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token comment">// print the type of &amp;x</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Output (gcc/clang):</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Pi</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h3><p>Pointers are variables that hold a memory address. They can be dereferenced using the dereference operator (*) to retrieve the value at the address they are holding. Dereferencing a wild or dangling (or null) pointer will result in undefined behavior and will probably crash your application.</p><p>Pointers are both more flexible than references and more dangerous. We’ll continue to explore this in the upcoming lessons.</p>`,125)]))}const c=s(p,[["render",l],["__file","pointers.html.vue"]]),r=JSON.parse(`{"path":"/CPP/pointers.html","title":"Compound Types: References and Pointers","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"1. Value categories (lvalues and rvalues)","slug":"_1-value-categories-lvalues-and-rvalues","link":"#_1-value-categories-lvalues-and-rvalues","children":[{"level":3,"title":"Lvalue and rvalue expressions","slug":"lvalue-and-rvalue-expressions","link":"#lvalue-and-rvalue-expressions","children":[]},{"level":3,"title":"Lvalue to rvalue conversion","slug":"lvalue-to-rvalue-conversion","link":"#lvalue-to-rvalue-conversion","children":[]}]},{"level":2,"title":"2. Lvalue references","slug":"_2-lvalue-references","link":"#_2-lvalue-references","children":[{"level":3,"title":"Lvalue reference variables","slug":"lvalue-reference-variables","link":"#lvalue-reference-variables","children":[]},{"level":3,"title":"Modifying values through a non-const lvalue reference","slug":"modifying-values-through-a-non-const-lvalue-reference","link":"#modifying-values-through-a-non-const-lvalue-reference","children":[]},{"level":3,"title":"Rederence initialization","slug":"rederence-initialization","link":"#rederence-initialization","children":[]},{"level":3,"title":"References and referents have independent lifetimes","slug":"references-and-referents-have-independent-lifetimes","link":"#references-and-referents-have-independent-lifetimes","children":[]},{"level":3,"title":"Dangling references","slug":"dangling-references","link":"#dangling-references","children":[]},{"level":3,"title":"References aren't objects","slug":"references-aren-t-objects","link":"#references-aren-t-objects","children":[]}]},{"level":2,"title":"3. Pass by lvalue reference","slug":"_3-pass-by-lvalue-reference","link":"#_3-pass-by-lvalue-reference","children":[{"level":3,"title":"Some objects are expensive to copy","slug":"some-objects-are-expensive-to-copy","link":"#some-objects-are-expensive-to-copy","children":[]},{"level":3,"title":"Pass by reference","slug":"pass-by-reference","link":"#pass-by-reference","children":[]},{"level":3,"title":"Pass by reference allows us to change the value of an argument","slug":"pass-by-reference-allows-us-to-change-the-value-of-an-argument","link":"#pass-by-reference-allows-us-to-change-the-value-of-an-argument","children":[]},{"level":3,"title":"Pass by const lvalue reference","slug":"pass-by-const-lvalue-reference","link":"#pass-by-const-lvalue-reference","children":[]},{"level":3,"title":"When to use pass by value vs pass by (const) reference","slug":"when-to-use-pass-by-value-vs-pass-by-const-reference","link":"#when-to-use-pass-by-value-vs-pass-by-const-reference","children":[]}]},{"level":2,"title":"4.   Introduction to pointers","slug":"_4-introduction-to-pointers","link":"#_4-introduction-to-pointers","children":[{"level":3,"title":"The address-of operator (&)","slug":"the-address-of-operator","link":"#the-address-of-operator","children":[]},{"level":3,"title":"The dereference operator (*)","slug":"the-dereference-operator","link":"#the-dereference-operator","children":[]},{"level":3,"title":"Pointers","slug":"pointers","link":"#pointers","children":[]},{"level":3,"title":"The address-of operator returns a pointer","slug":"the-address-of-operator-returns-a-pointer","link":"#the-address-of-operator-returns-a-pointer","children":[]},{"level":3,"title":"Conclusion","slug":"conclusion","link":"#conclusion","children":[]}]}],"git":{"updatedTime":1732167232000,"contributors":[{"name":"pingzhihe","email":"pzh1760473545@gmail.com","commits":2,"url":"https://github.com/pingzhihe"}]},"filePathRelative":"CPP/pointers.md"}`);export{c as comp,r as data};
